namespace WabbitBot.SourceGenerators.Templates;

/// <summary>
/// Template for generating event handler and publisher code
/// </summary>
public static class EventTemplate
{
    /// <summary>
    /// Template for event handler initialization
    /// </summary>
    public const string EventHandlerInitialization = @"
        public override Task InitializeAsync()
        {{
            // Auto-generated event subscriptions with error handling and metrics
{0}
            return Task.CompletedTask;
        }}";

    /// <summary>
    /// Template for event subscription
    /// </summary>
    public const string EventSubscription = @"
            {0}.Subscribe<{1}>(async evt =>
            {{
                using var metrics = EventMetrics.Start(""{1}"");
                try
                {{
                    await {2}(evt);
                    metrics.Success();
                }}
                catch (Exception ex)
                {{
                    metrics.Failure(ex);
                    await ErrorHandler.HandleErrorAsync(ex);
                    throw;
                }}
            }});";

    /// <summary>
    /// Template for request-response subscription
    /// </summary>
    public const string RequestResponseSubscription = @"
            {0}.SubscribeRequest<{1}, {2}>(
                async request =>
                {{
                    using var metrics = EventMetrics.Start(""{1}"");
                    try
                    {{
                        var response = await {3}(request);
                        metrics.Success();
                        return response;
                    }}
                    catch (Exception ex)
                    {{
                        metrics.Failure(ex);
                        await ErrorHandler.HandleErrorAsync(ex);
                        throw;
                    }}
                }});";

    /// <summary>
    /// Template for event publisher class
    /// </summary>
    public const string EventPublisherClass = @"
using System;
using System.Threading.Tasks;
using WabbitBot.Common.Events;
using WabbitBot.Common.Events.EventInterfaces;

namespace {0}
{{
    public partial class {1}
    {{
        private static readonly {2} _eventBus = {3};

        // Auto-generated event publisher methods
{4}
    }}
}}";

    /// <summary>
    /// Template for event publisher method
    /// </summary>
    public const string EventPublisherMethod = @"
        public async Task Publish{0}(string userId)
        {{
            var evt = new {0}Event
            {{
                {1}Id = Id,
                {1} = this,
                Timestamp = DateTime.UtcNow,
                UserId = userId
            }};

            await _eventBus.PublishAsync(evt);
        }}";

    /// <summary>
    /// Template for event class
    /// </summary>
    public const string EventClass = @"
using System;
using WabbitBot.Common.Events.EventInterfaces;

namespace {0}
{{
    public record {1}Event : {2}
    {{
        public string {3}Id {{ get; init; }} = string.Empty;
        public {3} {3} {{ get; init; }} = null!;
        public DateTime Timestamp {{ get; init; }} = DateTime.UtcNow;
        public string UserId {{ get; init; }} = string.Empty;
    }}
}}";

    /// <summary>
    /// Template for event handler class
    /// </summary>
    public const string EventHandlerClass = @"
using System;
using System.Threading.Tasks;
using WabbitBot.Common.Events;
using WabbitBot.Common.Events.EventInterfaces;
using WabbitBot.Common.Attributes;

namespace {0}
{{
    [GenerateEventHandler(EventBusType = ""{1}"", EnableMetrics = true, EnableErrorHandling = true, EnableLogging = true)]
    public partial class {2} : {3}
    {{
        public {2}()
            : base({4})
        {{
        }}

        public override Task InitializeAsync()
        {{
            // Event subscriptions will be auto-generated by source generator
            return Task.CompletedTask;
        }}

        // Event handler methods will be auto-generated based on method signatures
    }}
}}";
}
