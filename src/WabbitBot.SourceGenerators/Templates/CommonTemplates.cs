using System.Text;
using Microsoft.CodeAnalysis.Text;
using WabbitBot.SourceGenerators.Utils;

namespace WabbitBot.SourceGenerators.Templates;

/// <summary>
/// Common templates and utilities shared across all generators.
/// Provides reusable code generation patterns.
/// </summary>
public static class CommonTemplates
{
    /// <summary>
    /// Creates a standard file header with auto-generated comment.
    /// </summary>
    public static string CreateFileHeader(string generatorName)
    {
        return $$"""
            // <auto-generated>
            // This file was generated by {{generatorName}}
            // Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
            // </auto-generated>
            """;
    }

    /// <summary>
    /// Creates a namespace block with proper formatting.
    /// </summary>
    public static string CreateNamespace(string namespaceName, string content)
    {
        return SourceEmitter.WrapInNamespace(SourceEmitter.Indent(content), namespaceName);
    }

    /// <summary>
    /// Creates a partial class with injected dependencies.
    /// </summary>
    public static string CreatePartialClassWithDependencies(
        string className,
        string content,
        IEnumerable<(string type, string name)> dependencies
    )
    {
        var constructorParams = string.Join(", ", dependencies.Select(d => $"{d.type} {d.name}"));
        var fieldAssignments = string.Join(
            "\n",
            dependencies.Select(d => $"    private readonly {d.type} _{d.name.FirstCharToLower()};")
        );

        var constructor = SourceEmitter.CreateMethod(
            returnType: "",
            methodName: className,
            parameters: constructorParams,
            body: string.Join(
                "\n",
                dependencies.Select(d => $"        _{d.name.FirstCharToLower()} = {d.name.FirstCharToLower()};")
            ),
            modifiers: "public"
        );

        return SourceEmitter.CreatePartialClass(className, fieldAssignments + "\n\n" + constructor + "\n\n" + content);
    }

    /// <summary>
    /// Creates an event record with standard properties.
    /// </summary>
    public static string CreateEventRecord(
        string eventName,
        IEnumerable<(string type, string name)> payloadParams,
        string busType = "EventBusType.Core"
    )
    {
        var paramsList = string.Join(
            ",\n    ",
            new[]
            {
                $"EventBusType EventBusType = {busType}",
                "Guid EventId = default",
                "DateTime Timestamp = default",
            }.Concat(payloadParams.Select(p => $"{p.type} {p.name}"))
        );

        return $$"""
            public record {{eventName}}(
                {{paramsList}}
            ) : IEvent;
            """;
    }

    /// <summary>
    /// Creates a bus publish call.
    /// </summary>
    public static string CreateBusPublish(string busVarName, string eventCreation)
    {
        return $"await {busVarName}.PublishAsync({eventCreation});";
    }

    /// <summary>
    /// Creates a bus request-response call.
    /// </summary>
    public static string CreateBusRequest(string busVarName, string request, string responseType)
    {
        return $"await {busVarName}.RequestAsync<{request.GetType().Name}, {responseType}>({request});";
    }

    /// <summary>
    /// Creates XML documentation for generated members.
    /// </summary>
    public static string CreateGeneratedDoc(string description)
    {
        // Returns XML doc lines without extra trailing blank lines
        return SourceEmitter.CreateXmlDoc(description).TrimEnd();
    }

    /// <summary>
    /// Creates a try-catch block for error handling.
    /// </summary>
    public static string CreateTryCatch(string tryContent, string exceptionVar = "ex", string catchContent = "")
    {
        var defaultCatch = string.IsNullOrEmpty(catchContent)
            ? $"throw new InvalidOperationException(\"Error in generated code\", {exceptionVar});"
            : catchContent;

        return $$"""
            try
            {
            {{SourceEmitter.Indent(tryContent)}}
            }
            catch (Exception {{exceptionVar}})
            {
            {{SourceEmitter.Indent(defaultCatch)}}
            }
            """;
    }

    /// <summary>
    /// Creates a null check with argument exception.
    /// </summary>
    public static string CreateNullCheck(string parameterName)
    {
        return $"ArgumentNullException.ThrowIfNull({parameterName});";
    }

    /// <summary>
    /// Extension method to lowercase first character.
    /// </summary>
    private static string FirstCharToLower(this string str)
    {
        if (string.IsNullOrEmpty(str))
            return str;
        return char.ToLower(str[0]) + str.Substring(1);
    }
}
