using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Text;

namespace WabbitBot.SourceGenerators.Generators.Common;

/// <summary>
/// Base class for all source generators providing common functionality
/// </summary>
public abstract class BaseGenerator : ISourceGenerator
{
    public abstract void Initialize(GeneratorInitializationContext context);
    public abstract void Execute(GeneratorExecutionContext context);

    /// <summary>
    /// Gets the namespace from a class declaration
    /// </summary>
    protected string GetNamespace(ClassDeclarationSyntax classDeclaration)
    {
        var namespaceDeclaration = classDeclaration.Ancestors()
            .OfType<NamespaceDeclarationSyntax>()
            .FirstOrDefault();

        return namespaceDeclaration?.Name.ToString() ?? "WabbitBot.Core";
    }

    /// <summary>
    /// Checks if a class has a specific attribute
    /// </summary>
    protected bool HasAttribute(ClassDeclarationSyntax classDeclaration, string attributeName)
    {
        return classDeclaration.AttributeLists
            .SelectMany(attrList => attrList.Attributes)
            .Any(attr => attr.Name.ToString().Contains(attributeName));
    }

    /// <summary>
    /// Gets attribute arguments by name
    /// </summary>
    protected string? GetAttributeArgument(ClassDeclarationSyntax classDeclaration, string attributeName, string argumentName)
    {
        var attributes = classDeclaration.AttributeLists
            .SelectMany(attrList => attrList.Attributes)
            .Where(attr => attr.Name.ToString().Contains(attributeName));

        foreach (var attr in attributes)
        {
            if (attr.ArgumentList != null)
            {
                foreach (var arg in attr.ArgumentList.Arguments)
                {
                    if (arg.NameEquals?.Name.Identifier.Text == argumentName)
                    {
                        if (arg.Expression is LiteralExpressionSyntax literal)
                        {
                            return literal.Token.ValueText;
                        }
                    }
                }
            }
        }

        return null;
    }

    /// <summary>
    /// Creates a standard file header for generated files
    /// </summary>
    protected string CreateFileHeader(string className, string description)
    {
        return $@"// <auto-generated />
// This file was generated by the WabbitBot Source Generators
// Description: {description}
// Generated at: {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss} UTC

";
    }

    /// <summary>
    /// Creates a standard using statements block
    /// </summary>
    protected string CreateUsingStatements(params string[] additionalUsings)
    {
        var usings = new List<string>
        {
            "using System;",
            "using System.Threading.Tasks;",
            "using WabbitBot.Common.Events;",
            "using WabbitBot.Common.Events.EventInterfaces;"
        };

        usings.AddRange(additionalUsings);

        return string.Join("\n", usings) + "\n\n";
    }
}
