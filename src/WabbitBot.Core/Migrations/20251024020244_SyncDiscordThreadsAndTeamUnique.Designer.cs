// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WabbitBot.Core.Common.Database;
using WabbitBot.Core.Common.Models.Common;

#nullable disable

namespace WabbitBot.Core.Migrations
{
    [DbContext(typeof(WabbitBotDbContext))]
    [Migration("20251024020244_SyncDiscordThreadsAndTeamUnique")]
    partial class SyncDiscordThreadsAndTeamUnique
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.DiscordThreadTracking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("channel_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("CreatorDiscordUserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("creator_discord_user_id");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<string>("Feature")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("feature");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id");

                    b.Property<DateTime>("LastActivityAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_activity_at");

                    b.Property<decimal>("MessageId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("message_id");

                    b.Property<decimal>("ThreadId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("thread_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("discord_threads", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.DiscordThreadTrackingArchive", b =>
                {
                    b.Property<Guid>("ArchiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("archive_id");

                    b.Property<DateTime>("ArchivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("archived_at");

                    b.Property<Guid?>("ArchivedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("archived_by");

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("channel_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("CreatorDiscordUserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("creator_discord_user_id");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<string>("Feature")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("feature");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastActivityAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_activity_at");

                    b.Property<decimal>("MessageId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("message_id");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<decimal>("ThreadId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("thread_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("ArchiveId");

                    b.HasIndex("ArchivedAt")
                        .HasDatabaseName("idx_discord_threads_archive_archived_at");

                    b.HasIndex("EntityId", "Version")
                        .HasDatabaseName("idx_discord_threads_archive_entity_version");

                    b.ToTable("discord_threads_archive", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.Division", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Faction")
                        .HasColumnType("integer")
                        .HasColumnName("faction");

                    b.Property<string>("IconFilename")
                        .HasColumnType("text")
                        .HasColumnName("icon_filename");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.PrimitiveCollection<Guid[]>("LearningCurveIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("learning_curve_ids");

                    b.PrimitiveCollection<Guid[]>("MapStatsIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("map_stats_ids");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.PrimitiveCollection<Guid[]>("StatsIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("stats_ids");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("divisions", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.DivisionArchive", b =>
                {
                    b.Property<Guid>("ArchiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("archive_id");

                    b.Property<DateTime>("ArchivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("archived_at");

                    b.Property<Guid?>("ArchivedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("archived_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.Property<int>("Faction")
                        .HasColumnType("integer")
                        .HasColumnName("faction");

                    b.Property<string>("IconFilename")
                        .HasColumnType("text")
                        .HasColumnName("icon_filename");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.PrimitiveCollection<Guid[]>("LearningCurveIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("learning_curve_ids");

                    b.PrimitiveCollection<Guid[]>("MapStatsIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("map_stats_ids");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.PrimitiveCollection<Guid[]>("StatsIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("stats_ids");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("ArchiveId");

                    b.HasIndex("ArchivedAt")
                        .HasDatabaseName("idx_divisions_archive_archived_at");

                    b.HasIndex("EntityId", "Version")
                        .HasDatabaseName("idx_divisions_archive_entity_version");

                    b.ToTable("divisions_archive", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.DivisionLearningCurve", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DivisionId")
                        .HasColumnType("uuid")
                        .HasColumnName("division_id");

                    b.Property<bool>("IsReliable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_reliable");

                    b.Property<DateTime>("LastRecalculated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_recalculated");

                    b.Property<int>("ModelType")
                        .HasColumnType("integer")
                        .HasColumnName("model_type");

                    b.Property<Dictionary<string, double>>("Parameters")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("parameters");

                    b.Property<double>("RSquared")
                        .HasColumnType("double precision")
                        .HasColumnName("r_squared");

                    b.Property<Guid?>("SeasonId")
                        .HasColumnType("uuid")
                        .HasColumnName("season_id");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<int>("TotalGamesPlayed")
                        .HasColumnType("integer")
                        .HasColumnName("total_games_played");

                    b.Property<int>("TotalGamesWon")
                        .HasColumnType("integer")
                        .HasColumnName("total_games_won");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId")
                        .HasDatabaseName("idx_division_learning_curves_division_id");

                    b.HasIndex("Parameters")
                        .HasDatabaseName("gin_idx_division_learning_curves_parameters");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Parameters"), "gin");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("idx_division_learning_curves_team_id");

                    b.ToTable("division_learning_curves", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.DivisionLearningCurveArchive", b =>
                {
                    b.Property<Guid>("ArchiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("archive_id");

                    b.Property<DateTime>("ArchivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("archived_at");

                    b.Property<Guid?>("ArchivedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("archived_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DivisionId")
                        .HasColumnType("uuid")
                        .HasColumnName("division_id");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsReliable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_reliable");

                    b.Property<DateTime>("LastRecalculated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_recalculated");

                    b.Property<int>("ModelType")
                        .HasColumnType("integer")
                        .HasColumnName("model_type");

                    b.Property<Dictionary<string, double>>("Parameters")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("parameters");

                    b.Property<double>("RSquared")
                        .HasColumnType("double precision")
                        .HasColumnName("r_squared");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<Guid?>("SeasonId")
                        .HasColumnType("uuid")
                        .HasColumnName("season_id");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<int>("TotalGamesPlayed")
                        .HasColumnType("integer")
                        .HasColumnName("total_games_played");

                    b.Property<int>("TotalGamesWon")
                        .HasColumnType("integer")
                        .HasColumnName("total_games_won");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("ArchiveId");

                    b.HasIndex("ArchivedAt")
                        .HasDatabaseName("idx_division_learning_curves_archive_archived_at");

                    b.HasIndex("EntityId", "Version")
                        .HasDatabaseName("idx_division_learning_curves_archive_entity_version");

                    b.ToTable("division_learning_curves_archive", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.DivisionMapStats", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("AverageGameDurationMinutes")
                        .HasColumnType("double precision")
                        .HasColumnName("average_game_duration_minutes");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DivisionId")
                        .HasColumnType("uuid")
                        .HasColumnName("division_id");

                    b.Property<Dictionary<int, GameLengthBucket>>("GameLengthPerformance")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("game_length_performance");

                    b.Property<int>("GamesLost")
                        .HasColumnType("integer")
                        .HasColumnName("games_lost");

                    b.Property<int>("GamesPlayed")
                        .HasColumnType("integer")
                        .HasColumnName("games_played");

                    b.Property<int>("GamesWon")
                        .HasColumnType("integer")
                        .HasColumnName("games_won");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_at");

                    b.Property<Guid>("MapId")
                        .HasColumnType("uuid")
                        .HasColumnName("map_id");

                    b.Property<Guid?>("SeasonId")
                        .HasColumnType("uuid")
                        .HasColumnName("season_id");

                    b.Property<int?>("TeamSize")
                        .HasColumnType("integer")
                        .HasColumnName("team_size");

                    b.Property<double>("TotalGameDurationMinutes")
                        .HasColumnType("double precision")
                        .HasColumnName("total_game_duration_minutes");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<double>("Winrate")
                        .HasColumnType("double precision")
                        .HasColumnName("winrate");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId")
                        .HasDatabaseName("idx_division_map_stats_division_id");

                    b.HasIndex("GameLengthPerformance")
                        .HasDatabaseName("gin_idx_division_map_stats_game_length_performance");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("GameLengthPerformance"), "gin");

                    b.HasIndex("MapId")
                        .HasDatabaseName("idx_division_map_stats_map_id");

                    b.ToTable("division_map_stats", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.DivisionMapStatsArchive", b =>
                {
                    b.Property<Guid>("ArchiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("archive_id");

                    b.Property<DateTime>("ArchivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("archived_at");

                    b.Property<Guid?>("ArchivedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("archived_by");

                    b.Property<double>("AverageGameDurationMinutes")
                        .HasColumnType("double precision")
                        .HasColumnName("average_game_duration_minutes");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DivisionId")
                        .HasColumnType("uuid")
                        .HasColumnName("division_id");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.Property<Dictionary<int, GameLengthBucket>>("GameLengthPerformance")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("game_length_performance");

                    b.Property<int>("GamesLost")
                        .HasColumnType("integer")
                        .HasColumnName("games_lost");

                    b.Property<int>("GamesPlayed")
                        .HasColumnType("integer")
                        .HasColumnName("games_played");

                    b.Property<int>("GamesWon")
                        .HasColumnType("integer")
                        .HasColumnName("games_won");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_at");

                    b.Property<Guid>("MapId")
                        .HasColumnType("uuid")
                        .HasColumnName("map_id");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<Guid?>("SeasonId")
                        .HasColumnType("uuid")
                        .HasColumnName("season_id");

                    b.Property<int?>("TeamSize")
                        .HasColumnType("integer")
                        .HasColumnName("team_size");

                    b.Property<double>("TotalGameDurationMinutes")
                        .HasColumnType("double precision")
                        .HasColumnName("total_game_duration_minutes");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<double>("Winrate")
                        .HasColumnType("double precision")
                        .HasColumnName("winrate");

                    b.HasKey("ArchiveId");

                    b.HasIndex("ArchivedAt")
                        .HasDatabaseName("idx_division_map_stats_archive_archived_at");

                    b.HasIndex("EntityId", "Version")
                        .HasDatabaseName("idx_division_map_stats_archive_entity_version");

                    b.ToTable("division_map_stats_archive", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.DivisionStats", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Dictionary<string, object>>("AdditionalMetrics")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("additional_metrics");

                    b.Property<double>("AverageGameDurationMinutes")
                        .HasColumnType("double precision")
                        .HasColumnName("average_game_duration_minutes");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Dictionary<MapDensity, DensityStats>>("DensityPerformance")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("density_performance");

                    b.Property<Guid>("DivisionId")
                        .HasColumnType("uuid")
                        .HasColumnName("division_id");

                    b.Property<Dictionary<int, GameLengthBucket>>("GameLengthPerformance")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("game_length_performance");

                    b.Property<int>("GamesLost")
                        .HasColumnType("integer")
                        .HasColumnName("games_lost");

                    b.Property<int>("GamesPlayed")
                        .HasColumnType("integer")
                        .HasColumnName("games_played");

                    b.Property<int>("GamesWon")
                        .HasColumnType("integer")
                        .HasColumnName("games_won");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_at");

                    b.Property<Guid?>("SeasonId")
                        .HasColumnType("uuid")
                        .HasColumnName("season_id");

                    b.Property<int?>("TeamSize")
                        .HasColumnType("integer")
                        .HasColumnName("team_size");

                    b.Property<double>("TotalGameDurationMinutes")
                        .HasColumnType("double precision")
                        .HasColumnName("total_game_duration_minutes");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<double>("Winrate")
                        .HasColumnType("double precision")
                        .HasColumnName("winrate");

                    b.HasKey("Id");

                    b.HasIndex("AdditionalMetrics")
                        .HasDatabaseName("gin_idx_division_stats_additional_metrics");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("AdditionalMetrics"), "gin");

                    b.HasIndex("DensityPerformance")
                        .HasDatabaseName("gin_idx_division_stats_density_performance");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("DensityPerformance"), "gin");

                    b.HasIndex("DivisionId")
                        .HasDatabaseName("idx_division_stats_division_id");

                    b.HasIndex("GameLengthPerformance")
                        .HasDatabaseName("gin_idx_division_stats_game_length_performance");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("GameLengthPerformance"), "gin");

                    b.ToTable("division_stats", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.DivisionStatsArchive", b =>
                {
                    b.Property<Guid>("ArchiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("archive_id");

                    b.Property<Dictionary<string, object>>("AdditionalMetrics")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("additional_metrics");

                    b.Property<DateTime>("ArchivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("archived_at");

                    b.Property<Guid?>("ArchivedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("archived_by");

                    b.Property<double>("AverageGameDurationMinutes")
                        .HasColumnType("double precision")
                        .HasColumnName("average_game_duration_minutes");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Dictionary<MapDensity, DensityStats>>("DensityPerformance")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("density_performance");

                    b.Property<Guid>("DivisionId")
                        .HasColumnType("uuid")
                        .HasColumnName("division_id");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.Property<Dictionary<int, GameLengthBucket>>("GameLengthPerformance")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("game_length_performance");

                    b.Property<int>("GamesLost")
                        .HasColumnType("integer")
                        .HasColumnName("games_lost");

                    b.Property<int>("GamesPlayed")
                        .HasColumnType("integer")
                        .HasColumnName("games_played");

                    b.Property<int>("GamesWon")
                        .HasColumnType("integer")
                        .HasColumnName("games_won");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_at");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<Guid?>("SeasonId")
                        .HasColumnType("uuid")
                        .HasColumnName("season_id");

                    b.Property<int?>("TeamSize")
                        .HasColumnType("integer")
                        .HasColumnName("team_size");

                    b.Property<double>("TotalGameDurationMinutes")
                        .HasColumnType("double precision")
                        .HasColumnName("total_game_duration_minutes");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<double>("Winrate")
                        .HasColumnType("double precision")
                        .HasColumnName("winrate");

                    b.HasKey("ArchiveId");

                    b.HasIndex("ArchivedAt")
                        .HasDatabaseName("idx_division_stats_archive_archived_at");

                    b.HasIndex("EntityId", "Version")
                        .HasDatabaseName("idx_division_stats_archive_entity_version");

                    b.ToTable("division_stats_archive", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("GameNumber")
                        .HasColumnType("integer")
                        .HasColumnName("game_number");

                    b.Property<Guid>("MapId")
                        .HasColumnType("uuid")
                        .HasColumnName("map_id");

                    b.Property<Guid>("MatchId")
                        .HasColumnType("uuid")
                        .HasColumnName("match_id");

                    b.PrimitiveCollection<Guid[]>("ReplayIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("replay_ids");

                    b.PrimitiveCollection<Guid[]>("StateHistoryIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("state_history_ids");

                    b.Property<Guid?>("Team1DivisionId")
                        .HasColumnType("uuid")
                        .HasColumnName("team1_division_id");

                    b.Property<decimal?>("Team1GameContainerMsgId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("team1_game_container_msg_id");

                    b.PrimitiveCollection<List<Guid>>("Team1PlayerIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("team1_player_ids");

                    b.Property<Guid?>("Team2DivisionId")
                        .HasColumnType("uuid")
                        .HasColumnName("team2_division_id");

                    b.Property<decimal?>("Team2GameContainerMsgId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("team2_game_container_msg_id");

                    b.PrimitiveCollection<List<Guid>>("Team2PlayerIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("team2_player_ids");

                    b.Property<int>("TeamSize")
                        .HasColumnType("integer")
                        .HasColumnName("team_size");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MapId")
                        .HasDatabaseName("idx_games_map_id");

                    b.HasIndex("MatchId")
                        .HasDatabaseName("idx_games_match_id");

                    b.HasIndex("Team1DivisionId")
                        .HasDatabaseName("idx_games_team1_division_id");

                    b.HasIndex("Team2DivisionId")
                        .HasDatabaseName("idx_games_team2_division_id");

                    b.ToTable("games", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.GameArchive", b =>
                {
                    b.Property<Guid>("ArchiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("archive_id");

                    b.Property<DateTime>("ArchivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("archived_at");

                    b.Property<Guid?>("ArchivedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("archived_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.Property<int>("GameNumber")
                        .HasColumnType("integer")
                        .HasColumnName("game_number");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MapId")
                        .HasColumnType("uuid")
                        .HasColumnName("map_id");

                    b.Property<Guid>("MatchId")
                        .HasColumnType("uuid")
                        .HasColumnName("match_id");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.PrimitiveCollection<Guid[]>("ReplayIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("replay_ids");

                    b.PrimitiveCollection<Guid[]>("StateHistoryIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("state_history_ids");

                    b.Property<Guid?>("Team1DivisionId")
                        .HasColumnType("uuid")
                        .HasColumnName("team1_division_id");

                    b.Property<decimal?>("Team1GameContainerMsgId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("team1_game_container_msg_id");

                    b.PrimitiveCollection<List<Guid>>("Team1PlayerIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("team1_player_ids");

                    b.Property<Guid?>("Team2DivisionId")
                        .HasColumnType("uuid")
                        .HasColumnName("team2_division_id");

                    b.Property<decimal?>("Team2GameContainerMsgId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("team2_game_container_msg_id");

                    b.PrimitiveCollection<List<Guid>>("Team2PlayerIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("team2_player_ids");

                    b.Property<int>("TeamSize")
                        .HasColumnType("integer")
                        .HasColumnName("team_size");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("ArchiveId");

                    b.HasIndex("ArchivedAt")
                        .HasDatabaseName("idx_games_archive_archived_at");

                    b.HasIndex("EntityId", "Version")
                        .HasDatabaseName("idx_games_archive_entity_version");

                    b.ToTable("games_archive", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.GameStateSnapshot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Dictionary<string, object>>("AdditionalData")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("additional_data");

                    b.Property<string>("CancellationReason")
                        .HasColumnType("text")
                        .HasColumnName("cancellation_reason");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("cancelled_at");

                    b.Property<Guid?>("CancelledByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("cancelled_by_user_id");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ForfeitReason")
                        .HasColumnType("text")
                        .HasColumnName("forfeit_reason");

                    b.Property<DateTime?>("ForfeitedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("forfeited_at");

                    b.Property<Guid?>("ForfeitedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("forfeited_by_user_id");

                    b.Property<Guid?>("ForfeitedTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("forfeited_team_id");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_id");

                    b.Property<int>("GameNumber")
                        .HasColumnType("integer")
                        .HasColumnName("game_number");

                    b.Property<Guid>("MapId")
                        .HasColumnType("uuid")
                        .HasColumnName("map_id");

                    b.Property<Guid>("MatchId")
                        .HasColumnType("uuid")
                        .HasColumnName("match_id");

                    b.Property<Dictionary<Guid, string>>("PlayerDeckCodes")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("player_deck_codes");

                    b.PrimitiveCollection<HashSet<Guid>>("PlayerDeckConfirmed")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("player_deck_confirmed");

                    b.Property<Dictionary<Guid, DateTime>>("PlayerDeckConfirmedAt")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("player_deck_confirmed_at");

                    b.Property<Dictionary<Guid, DateTime>>("PlayerDeckSubmittedAt")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("player_deck_submitted_at");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid?>("Team1DivisionId")
                        .HasColumnType("uuid")
                        .HasColumnName("team1_division_id");

                    b.PrimitiveCollection<List<Guid>>("Team1PlayerIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("team1_player_ids");

                    b.Property<Guid?>("Team2DivisionId")
                        .HasColumnType("uuid")
                        .HasColumnName("team2_division_id");

                    b.PrimitiveCollection<List<Guid>>("Team2PlayerIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("team2_player_ids");

                    b.Property<int>("TeamSize")
                        .HasColumnType("integer")
                        .HasColumnName("team_size");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<Guid>("TriggeredByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("triggered_by_user_id");

                    b.Property<string>("TriggeredByUserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("triggered_by_user_name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WinnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("winner_id");

                    b.HasKey("Id");

                    b.HasIndex("AdditionalData")
                        .HasDatabaseName("gin_idx_game_state_snapshots_additional_data");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("AdditionalData"), "gin");

                    b.HasIndex("GameId")
                        .HasDatabaseName("idx_game_state_snapshots_game_id");

                    b.HasIndex("MatchId")
                        .HasDatabaseName("idx_game_state_snapshots_match_id");

                    b.HasIndex("PlayerDeckCodes")
                        .HasDatabaseName("gin_idx_game_state_snapshots_player_deck_codes");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("PlayerDeckCodes"), "gin");

                    b.HasIndex("PlayerDeckConfirmedAt")
                        .HasDatabaseName("gin_idx_game_state_snapshots_player_deck_confirmed_at");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("PlayerDeckConfirmedAt"), "gin");

                    b.HasIndex("PlayerDeckSubmittedAt")
                        .HasDatabaseName("gin_idx_game_state_snapshots_player_deck_submitted_at");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("PlayerDeckSubmittedAt"), "gin");

                    b.ToTable("game_state_snapshots", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.GameStateSnapshotArchive", b =>
                {
                    b.Property<Guid>("ArchiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("archive_id");

                    b.Property<Dictionary<string, object>>("AdditionalData")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("additional_data");

                    b.Property<DateTime>("ArchivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("archived_at");

                    b.Property<Guid?>("ArchivedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("archived_by");

                    b.Property<string>("CancellationReason")
                        .HasColumnType("text")
                        .HasColumnName("cancellation_reason");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("cancelled_at");

                    b.Property<Guid?>("CancelledByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("cancelled_by_user_id");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.Property<string>("ForfeitReason")
                        .HasColumnType("text")
                        .HasColumnName("forfeit_reason");

                    b.Property<DateTime?>("ForfeitedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("forfeited_at");

                    b.Property<Guid?>("ForfeitedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("forfeited_by_user_id");

                    b.Property<Guid?>("ForfeitedTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("forfeited_team_id");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_id");

                    b.Property<int>("GameNumber")
                        .HasColumnType("integer")
                        .HasColumnName("game_number");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MapId")
                        .HasColumnType("uuid")
                        .HasColumnName("map_id");

                    b.Property<Guid>("MatchId")
                        .HasColumnType("uuid")
                        .HasColumnName("match_id");

                    b.Property<Dictionary<Guid, string>>("PlayerDeckCodes")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("player_deck_codes");

                    b.PrimitiveCollection<HashSet<Guid>>("PlayerDeckConfirmed")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("player_deck_confirmed");

                    b.Property<Dictionary<Guid, DateTime>>("PlayerDeckConfirmedAt")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("player_deck_confirmed_at");

                    b.Property<Dictionary<Guid, DateTime>>("PlayerDeckSubmittedAt")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("player_deck_submitted_at");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid?>("Team1DivisionId")
                        .HasColumnType("uuid")
                        .HasColumnName("team1_division_id");

                    b.PrimitiveCollection<List<Guid>>("Team1PlayerIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("team1_player_ids");

                    b.Property<Guid?>("Team2DivisionId")
                        .HasColumnType("uuid")
                        .HasColumnName("team2_division_id");

                    b.PrimitiveCollection<List<Guid>>("Team2PlayerIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("team2_player_ids");

                    b.Property<int>("TeamSize")
                        .HasColumnType("integer")
                        .HasColumnName("team_size");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<Guid>("TriggeredByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("triggered_by_user_id");

                    b.Property<string>("TriggeredByUserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("triggered_by_user_name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<Guid?>("WinnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("winner_id");

                    b.HasKey("ArchiveId");

                    b.HasIndex("ArchivedAt")
                        .HasDatabaseName("idx_game_state_snapshots_archive_archived_at");

                    b.HasIndex("EntityId", "Version")
                        .HasDatabaseName("idx_game_state_snapshots_archive_entity_version");

                    b.ToTable("game_state_snapshots_archive", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.Map", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Density")
                        .HasColumnType("integer")
                        .HasColumnName("density");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsInRandomPool")
                        .HasColumnType("boolean")
                        .HasColumnName("is_in_random_pool");

                    b.Property<bool>("IsInTournamentPool")
                        .HasColumnType("boolean")
                        .HasColumnName("is_in_tournament_pool");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("ScenarioName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("scenario_name");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("size");

                    b.Property<string>("ThumbnailFilename")
                        .HasColumnType("text")
                        .HasColumnName("thumbnail_filename");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("maps", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.MapArchive", b =>
                {
                    b.Property<Guid>("ArchiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("archive_id");

                    b.Property<DateTime>("ArchivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("archived_at");

                    b.Property<Guid?>("ArchivedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("archived_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Density")
                        .HasColumnType("integer")
                        .HasColumnName("density");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsInRandomPool")
                        .HasColumnType("boolean")
                        .HasColumnName("is_in_random_pool");

                    b.Property<bool>("IsInTournamentPool")
                        .HasColumnType("boolean")
                        .HasColumnName("is_in_tournament_pool");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<string>("ScenarioName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("scenario_name");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("size");

                    b.Property<string>("ThumbnailFilename")
                        .HasColumnType("text")
                        .HasColumnName("thumbnail_filename");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("ArchiveId");

                    b.HasIndex("ArchivedAt")
                        .HasDatabaseName("idx_maps_archive_archived_at");

                    b.HasIndex("EntityId", "Version")
                        .HasDatabaseName("idx_maps_archive_entity_version");

                    b.ToTable("maps_archive", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.MashinaUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("DiscordAvatarUrl")
                        .HasColumnType("text")
                        .HasColumnName("discord_avatar_url");

                    b.Property<string>("DiscordGlobalname")
                        .HasColumnType("text")
                        .HasColumnName("discord_globalname");

                    b.Property<string>("DiscordMention")
                        .HasColumnType("text")
                        .HasColumnName("discord_mention");

                    b.Property<decimal>("DiscordUserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("discord_user_id");

                    b.Property<string>("DiscordUsername")
                        .HasColumnType("text")
                        .HasColumnName("discord_username");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("joined_at");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_active");

                    b.Property<Guid?>("PlayerId")
                        .HasColumnType("uuid")
                        .HasColumnName("player_id");

                    b.PrimitiveCollection<List<string>>("PreviousDiscordGlobalnames")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("previous_discord_globalnames");

                    b.PrimitiveCollection<List<string>>("PreviousDiscordMentions")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("previous_discord_mentions");

                    b.PrimitiveCollection<List<ulong>>("PreviousDiscordUserIds")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("previous_discord_user_ids");

                    b.PrimitiveCollection<List<string>>("PreviousDiscordUsernames")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("previous_discord_usernames");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .HasDatabaseName("idx_mashina_users_player_id");

                    b.HasIndex("PreviousDiscordGlobalnames")
                        .HasDatabaseName("gin_idx_mashina_users_previous_discord_globalnames");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("PreviousDiscordGlobalnames"), "gin");

                    b.HasIndex("PreviousDiscordMentions")
                        .HasDatabaseName("gin_idx_mashina_users_previous_discord_mentions");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("PreviousDiscordMentions"), "gin");

                    b.HasIndex("PreviousDiscordUserIds")
                        .HasDatabaseName("gin_idx_mashina_users_previous_discord_user_ids");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("PreviousDiscordUserIds"), "gin");

                    b.HasIndex("PreviousDiscordUsernames")
                        .HasDatabaseName("gin_idx_mashina_users_previous_discord_usernames");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("PreviousDiscordUsernames"), "gin");

                    b.ToTable("mashina_users", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.MashinaUserArchive", b =>
                {
                    b.Property<Guid>("ArchiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("archive_id");

                    b.Property<DateTime>("ArchivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("archived_at");

                    b.Property<Guid?>("ArchivedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("archived_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("DiscordAvatarUrl")
                        .HasColumnType("text")
                        .HasColumnName("discord_avatar_url");

                    b.Property<string>("DiscordGlobalname")
                        .HasColumnType("text")
                        .HasColumnName("discord_globalname");

                    b.Property<string>("DiscordMention")
                        .HasColumnType("text")
                        .HasColumnName("discord_mention");

                    b.Property<decimal>("DiscordUserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("discord_user_id");

                    b.Property<string>("DiscordUsername")
                        .HasColumnType("text")
                        .HasColumnName("discord_username");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("joined_at");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_active");

                    b.Property<Guid?>("PlayerId")
                        .HasColumnType("uuid")
                        .HasColumnName("player_id");

                    b.PrimitiveCollection<List<string>>("PreviousDiscordGlobalnames")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("previous_discord_globalnames");

                    b.PrimitiveCollection<List<string>>("PreviousDiscordMentions")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("previous_discord_mentions");

                    b.PrimitiveCollection<List<ulong>>("PreviousDiscordUserIds")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("previous_discord_user_ids");

                    b.PrimitiveCollection<List<string>>("PreviousDiscordUsernames")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("previous_discord_usernames");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("ArchiveId");

                    b.HasIndex("ArchivedAt")
                        .HasDatabaseName("idx_mashina_users_archive_archived_at");

                    b.HasIndex("EntityId", "Version")
                        .HasDatabaseName("idx_mashina_users_archive_entity_version");

                    b.ToTable("mashina_users_archive", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.Match", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.PrimitiveCollection<List<string>>("AvailableMaps")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("available_maps");

                    b.Property<int>("BestOf")
                        .HasColumnType("integer")
                        .HasColumnName("best_of");

                    b.Property<decimal?>("ChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("channel_id");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<List<string>>("FinalMapPool")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("final_map_pool");

                    b.PrimitiveCollection<Guid[]>("GameIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("game_ids");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<int?>("ParentType")
                        .HasColumnType("integer")
                        .HasColumnName("parent_type");

                    b.Property<bool>("PlayToCompletion")
                        .HasColumnType("boolean")
                        .HasColumnName("play_to_completion");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.PrimitiveCollection<Guid[]>("StateHistoryIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("state_history_ids");

                    b.Property<Guid>("Team1Id")
                        .HasColumnType("uuid")
                        .HasColumnName("team1_id");

                    b.PrimitiveCollection<List<string>>("Team1MapBans")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("team1_map_bans");

                    b.Property<DateTime?>("Team1MapBansConfirmedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("team1_map_bans_confirmed_at");

                    b.Property<decimal?>("Team1MatchResultsMsgId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("team1_match_results_msg_id");

                    b.Property<decimal?>("Team1OverviewContainerMsgId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("team1_overview_container_msg_id");

                    b.Property<decimal?>("Team1ThreadId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("team1_thread_id");

                    b.Property<Guid>("Team2Id")
                        .HasColumnType("uuid")
                        .HasColumnName("team2_id");

                    b.PrimitiveCollection<List<string>>("Team2MapBans")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("team2_map_bans");

                    b.Property<DateTime?>("Team2MapBansConfirmedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("team2_map_bans_confirmed_at");

                    b.Property<decimal?>("Team2MatchResultsMsgId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("team2_match_results_msg_id");

                    b.Property<decimal?>("Team2OverviewContainerMsgId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("team2_overview_container_msg_id");

                    b.Property<decimal?>("Team2ThreadId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("team2_thread_id");

                    b.Property<int>("TeamSize")
                        .HasColumnType("integer")
                        .HasColumnName("team_size");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WinnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("winner_id");

                    b.HasKey("Id");

                    b.HasIndex("AvailableMaps")
                        .HasDatabaseName("gin_idx_matches_available_maps");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("AvailableMaps"), "gin");

                    b.HasIndex("FinalMapPool")
                        .HasDatabaseName("gin_idx_matches_final_map_pool");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("FinalMapPool"), "gin");

                    b.HasIndex("Team1Id")
                        .HasDatabaseName("idx_matches_team1_id");

                    b.HasIndex("Team1MapBans")
                        .HasDatabaseName("gin_idx_matches_team1_map_bans");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Team1MapBans"), "gin");

                    b.HasIndex("Team2Id")
                        .HasDatabaseName("idx_matches_team2_id");

                    b.HasIndex("Team2MapBans")
                        .HasDatabaseName("gin_idx_matches_team2_map_bans");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Team2MapBans"), "gin");

                    b.ToTable("matches", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.MatchArchive", b =>
                {
                    b.Property<Guid>("ArchiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("archive_id");

                    b.Property<DateTime>("ArchivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("archived_at");

                    b.Property<Guid?>("ArchivedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("archived_by");

                    b.PrimitiveCollection<List<string>>("AvailableMaps")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("available_maps");

                    b.Property<int>("BestOf")
                        .HasColumnType("integer")
                        .HasColumnName("best_of");

                    b.Property<decimal?>("ChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("channel_id");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.PrimitiveCollection<List<string>>("FinalMapPool")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("final_map_pool");

                    b.PrimitiveCollection<Guid[]>("GameIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("game_ids");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<int?>("ParentType")
                        .HasColumnType("integer")
                        .HasColumnName("parent_type");

                    b.Property<bool>("PlayToCompletion")
                        .HasColumnType("boolean")
                        .HasColumnName("play_to_completion");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.PrimitiveCollection<Guid[]>("StateHistoryIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("state_history_ids");

                    b.Property<Guid>("Team1Id")
                        .HasColumnType("uuid")
                        .HasColumnName("team1_id");

                    b.PrimitiveCollection<List<string>>("Team1MapBans")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("team1_map_bans");

                    b.Property<DateTime?>("Team1MapBansConfirmedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("team1_map_bans_confirmed_at");

                    b.Property<decimal?>("Team1MatchResultsMsgId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("team1_match_results_msg_id");

                    b.Property<decimal?>("Team1OverviewContainerMsgId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("team1_overview_container_msg_id");

                    b.Property<decimal?>("Team1ThreadId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("team1_thread_id");

                    b.Property<Guid>("Team2Id")
                        .HasColumnType("uuid")
                        .HasColumnName("team2_id");

                    b.PrimitiveCollection<List<string>>("Team2MapBans")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("team2_map_bans");

                    b.Property<DateTime?>("Team2MapBansConfirmedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("team2_map_bans_confirmed_at");

                    b.Property<decimal?>("Team2MatchResultsMsgId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("team2_match_results_msg_id");

                    b.Property<decimal?>("Team2OverviewContainerMsgId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("team2_overview_container_msg_id");

                    b.Property<decimal?>("Team2ThreadId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("team2_thread_id");

                    b.Property<int>("TeamSize")
                        .HasColumnType("integer")
                        .HasColumnName("team_size");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<Guid?>("WinnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("winner_id");

                    b.HasKey("ArchiveId");

                    b.HasIndex("ArchivedAt")
                        .HasDatabaseName("idx_matches_archive_archived_at");

                    b.HasIndex("EntityId", "Version")
                        .HasDatabaseName("idx_matches_archive_entity_version");

                    b.ToTable("matches_archive", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.MatchStateSnapshot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Dictionary<string, object>>("AdditionalData")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("additional_data");

                    b.PrimitiveCollection<List<string>>("AvailableMaps")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("available_maps");

                    b.Property<string>("CancellationReason")
                        .HasColumnType("text")
                        .HasColumnName("cancellation_reason");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("cancelled_at");

                    b.Property<Guid?>("CancelledByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("cancelled_by_user_id");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("CurrentGameNumber")
                        .HasColumnType("integer")
                        .HasColumnName("current_game_number");

                    b.Property<Guid?>("CurrentMapId")
                        .HasColumnType("uuid")
                        .HasColumnName("current_map_id");

                    b.PrimitiveCollection<List<string>>("FinalMapPool")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("final_map_pool");

                    b.Property<string>("FinalScore")
                        .HasColumnType("text")
                        .HasColumnName("final_score");

                    b.Property<string>("ForfeitReason")
                        .HasColumnType("text")
                        .HasColumnName("forfeit_reason");

                    b.Property<DateTime?>("ForfeitedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("forfeited_at");

                    b.Property<Guid?>("ForfeitedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("forfeited_by_user_id");

                    b.Property<Guid?>("ForfeitedTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("forfeited_team_id");

                    b.Property<Guid>("MatchId")
                        .HasColumnType("uuid")
                        .HasColumnName("match_id");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<bool>("Team1BansConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("team1_bans_confirmed");

                    b.Property<bool>("Team1BansSubmitted")
                        .HasColumnType("boolean")
                        .HasColumnName("team1_bans_submitted");

                    b.PrimitiveCollection<List<string>>("Team1MapBans")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("team1_map_bans");

                    b.Property<bool>("Team2BansConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("team2_bans_confirmed");

                    b.Property<bool>("Team2BansSubmitted")
                        .HasColumnType("boolean")
                        .HasColumnName("team2_bans_submitted");

                    b.PrimitiveCollection<List<string>>("Team2MapBans")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("team2_map_bans");

                    b.Property<Guid>("TriggeredByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("triggered_by_user_id");

                    b.Property<string>("TriggeredByUserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("triggered_by_user_name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WinnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("winner_id");

                    b.HasKey("Id");

                    b.HasIndex("AdditionalData")
                        .HasDatabaseName("gin_idx_match_state_snapshots_additional_data");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("AdditionalData"), "gin");

                    b.HasIndex("AvailableMaps")
                        .HasDatabaseName("gin_idx_match_state_snapshots_available_maps");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("AvailableMaps"), "gin");

                    b.HasIndex("FinalMapPool")
                        .HasDatabaseName("gin_idx_match_state_snapshots_final_map_pool");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("FinalMapPool"), "gin");

                    b.HasIndex("MatchId");

                    b.HasIndex("Team1MapBans")
                        .HasDatabaseName("gin_idx_match_state_snapshots_team1_map_bans");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Team1MapBans"), "gin");

                    b.HasIndex("Team2MapBans")
                        .HasDatabaseName("gin_idx_match_state_snapshots_team2_map_bans");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Team2MapBans"), "gin");

                    b.ToTable("match_state_snapshots", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.MatchStateSnapshotArchive", b =>
                {
                    b.Property<Guid>("ArchiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("archive_id");

                    b.Property<Dictionary<string, object>>("AdditionalData")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("additional_data");

                    b.Property<DateTime>("ArchivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("archived_at");

                    b.Property<Guid?>("ArchivedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("archived_by");

                    b.PrimitiveCollection<List<string>>("AvailableMaps")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("available_maps");

                    b.Property<string>("CancellationReason")
                        .HasColumnType("text")
                        .HasColumnName("cancellation_reason");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("cancelled_at");

                    b.Property<Guid?>("CancelledByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("cancelled_by_user_id");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("CurrentGameNumber")
                        .HasColumnType("integer")
                        .HasColumnName("current_game_number");

                    b.Property<Guid?>("CurrentMapId")
                        .HasColumnType("uuid")
                        .HasColumnName("current_map_id");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.PrimitiveCollection<List<string>>("FinalMapPool")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("final_map_pool");

                    b.Property<string>("FinalScore")
                        .HasColumnType("text")
                        .HasColumnName("final_score");

                    b.Property<string>("ForfeitReason")
                        .HasColumnType("text")
                        .HasColumnName("forfeit_reason");

                    b.Property<DateTime?>("ForfeitedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("forfeited_at");

                    b.Property<Guid?>("ForfeitedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("forfeited_by_user_id");

                    b.Property<Guid?>("ForfeitedTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("forfeited_team_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MatchId")
                        .HasColumnType("uuid")
                        .HasColumnName("match_id");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<bool>("Team1BansConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("team1_bans_confirmed");

                    b.Property<bool>("Team1BansSubmitted")
                        .HasColumnType("boolean")
                        .HasColumnName("team1_bans_submitted");

                    b.PrimitiveCollection<List<string>>("Team1MapBans")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("team1_map_bans");

                    b.Property<bool>("Team2BansConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("team2_bans_confirmed");

                    b.Property<bool>("Team2BansSubmitted")
                        .HasColumnType("boolean")
                        .HasColumnName("team2_bans_submitted");

                    b.PrimitiveCollection<List<string>>("Team2MapBans")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("team2_map_bans");

                    b.Property<Guid>("TriggeredByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("triggered_by_user_id");

                    b.Property<string>("TriggeredByUserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("triggered_by_user_name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<Guid?>("WinnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("winner_id");

                    b.HasKey("ArchiveId");

                    b.HasIndex("ArchivedAt")
                        .HasDatabaseName("idx_match_state_snapshots_archive_archived_at");

                    b.HasIndex("EntityId", "Version")
                        .HasDatabaseName("idx_match_state_snapshots_archive_entity_version");

                    b.ToTable("match_state_snapshots_archive", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Dictionary<string, string>>("CurrentPlatformIds")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("current_platform_ids");

                    b.Property<string>("CurrentSteamUsername")
                        .HasColumnType("text")
                        .HasColumnName("current_steam_username");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_active");

                    b.Property<Guid>("MashinaUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("mashina_user_id");

                    b.Property<Guid?>("MatchId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MatchId1")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Dictionary<string, List<string>>>("PreviousPlatformIds")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("previous_platform_ids");

                    b.PrimitiveCollection<List<string>>("PreviousSteamUsernames")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("previous_steam_usernames");

                    b.Property<Guid?>("ScrimmageId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ScrimmageId1")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ScrimmageLeaderboardItemId")
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<List<Guid>>("TeamIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("team_ids");

                    b.Property<Dictionary<Guid, DateTime>>("TeamJoinCooldowns")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("team_join_cooldowns");

                    b.Property<int>("TeamJoinLimit")
                        .HasColumnType("integer")
                        .HasColumnName("team_join_limit");

                    b.Property<Guid?>("TournamentLeaderboardItemId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CurrentPlatformIds")
                        .HasDatabaseName("gin_idx_players_current_platform_ids");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("CurrentPlatformIds"), "gin");

                    b.HasIndex("MashinaUserId")
                        .IsUnique()
                        .HasDatabaseName("idx_players_mashina_user_id");

                    b.HasIndex("MatchId");

                    b.HasIndex("MatchId1");

                    b.HasIndex("PreviousPlatformIds")
                        .HasDatabaseName("gin_idx_players_previous_platform_ids");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("PreviousPlatformIds"), "gin");

                    b.HasIndex("PreviousSteamUsernames")
                        .HasDatabaseName("gin_idx_players_previous_steam_usernames");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("PreviousSteamUsernames"), "gin");

                    b.HasIndex("ScrimmageId");

                    b.HasIndex("ScrimmageId1");

                    b.HasIndex("ScrimmageLeaderboardItemId");

                    b.HasIndex("TeamJoinCooldowns")
                        .HasDatabaseName("gin_idx_players_team_join_cooldowns");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("TeamJoinCooldowns"), "gin");

                    b.HasIndex("TournamentLeaderboardItemId");

                    b.ToTable("players", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.PlayerArchive", b =>
                {
                    b.Property<Guid>("ArchiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("archive_id");

                    b.Property<DateTime>("ArchivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("archived_at");

                    b.Property<Guid?>("ArchivedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("archived_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Dictionary<string, string>>("CurrentPlatformIds")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("current_platform_ids");

                    b.Property<string>("CurrentSteamUsername")
                        .HasColumnType("text")
                        .HasColumnName("current_steam_username");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_active");

                    b.Property<Guid>("MashinaUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("mashina_user_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Dictionary<string, List<string>>>("PreviousPlatformIds")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("previous_platform_ids");

                    b.PrimitiveCollection<List<string>>("PreviousSteamUsernames")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("previous_steam_usernames");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.PrimitiveCollection<List<Guid>>("TeamIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("team_ids");

                    b.Property<Dictionary<Guid, DateTime>>("TeamJoinCooldowns")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("team_join_cooldowns");

                    b.Property<int>("TeamJoinLimit")
                        .HasColumnType("integer")
                        .HasColumnName("team_join_limit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("ArchiveId");

                    b.HasIndex("ArchivedAt")
                        .HasDatabaseName("idx_players_archive_archived_at");

                    b.HasIndex("EntityId", "Version")
                        .HasDatabaseName("idx_players_archive_entity_version");

                    b.ToTable("players_archive", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.ProvenPotentialRecordArchive", b =>
                {
                    b.Property<Guid>("ArchiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("archive_id");

                    b.Property<double?>("AdjustedEstablishedChange")
                        .HasColumnType("double precision")
                        .HasColumnName("adjusted_established_change");

                    b.Property<double?>("AdjustedNewChange")
                        .HasColumnType("double precision")
                        .HasColumnName("adjusted_new_change");

                    b.Property<Guid?>("AppliedAtMatchId")
                        .HasColumnType("uuid")
                        .HasColumnName("applied_at_match_id");

                    b.PrimitiveCollection<HashSet<double>>("AppliedThresholds")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("applied_thresholds");

                    b.Property<DateTime>("ArchivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("archived_at");

                    b.Property<Guid?>("ArchivedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("archived_by");

                    b.Property<Guid?>("BatchId")
                        .HasColumnType("uuid")
                        .HasColumnName("batch_id");

                    b.Property<double>("ChallengerConfidence")
                        .HasColumnType("double precision")
                        .HasColumnName("challenger_confidence");

                    b.Property<Guid>("ChallengerId")
                        .HasColumnType("uuid")
                        .HasColumnName("challenger_id");

                    b.Property<double>("ChallengerOriginalRatingChange")
                        .HasColumnType("double precision")
                        .HasColumnName("challenger_original_rating_change");

                    b.Property<double>("ChallengerRating")
                        .HasColumnType("double precision")
                        .HasColumnName("challenger_rating");

                    b.Property<double?>("ClosureFraction")
                        .HasColumnType("double precision")
                        .HasColumnName("closure_fraction");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("CrossedThresholds")
                        .HasColumnType("integer")
                        .HasColumnName("crossed_thresholds");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.Property<Guid>("EstablishedPlayerId")
                        .HasColumnType("uuid")
                        .HasColumnName("established_player_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_complete");

                    b.Property<DateTime?>("LastCheckedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_checked_at");

                    b.Property<Guid>("NewPlayerId")
                        .HasColumnType("uuid")
                        .HasColumnName("new_player_id");

                    b.Property<int>("NewPlayerMatchCountAtCreation")
                        .HasColumnType("integer")
                        .HasColumnName("new_player_match_count_at_creation");

                    b.Property<double>("OpponentConfidence")
                        .HasColumnType("double precision")
                        .HasColumnName("opponent_confidence");

                    b.Property<Guid>("OpponentId")
                        .HasColumnType("uuid")
                        .HasColumnName("opponent_id");

                    b.Property<double>("OpponentOriginalRatingChange")
                        .HasColumnType("double precision")
                        .HasColumnName("opponent_original_rating_change");

                    b.Property<double>("OpponentRating")
                        .HasColumnType("double precision")
                        .HasColumnName("opponent_rating");

                    b.Property<Guid>("OriginalMatchId")
                        .HasColumnType("uuid")
                        .HasColumnName("original_match_id");

                    b.Property<double>("RatingAdjustment")
                        .HasColumnType("double precision")
                        .HasColumnName("rating_adjustment");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<double?>("ScalingApplied")
                        .HasColumnType("double precision")
                        .HasColumnName("scaling_applied");

                    b.Property<int>("TeamSize")
                        .HasColumnType("integer")
                        .HasColumnName("team_size");

                    b.Property<Guid?>("TrackingEndMatchId")
                        .HasColumnType("uuid")
                        .HasColumnName("tracking_end_match_id");

                    b.Property<Guid>("TriggerMatchId")
                        .HasColumnType("uuid")
                        .HasColumnName("trigger_match_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("ArchiveId");

                    b.HasIndex("ArchivedAt")
                        .HasDatabaseName("idx_proven_potential_records_archive_archived_at");

                    b.HasIndex("EntityId", "Version")
                        .HasDatabaseName("idx_proven_potential_records_archive_entity_version");

                    b.ToTable("proven_potential_records_archive", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.RatingPercentileBreakpoints", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Dictionary<RatingTier, double>>("Breakpoints")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("breakpoints");

                    b.Property<DateTime>("CalculatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("calculated_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("SeasonId")
                        .HasColumnType("uuid")
                        .HasColumnName("season_id");

                    b.Property<int>("TeamSize")
                        .HasColumnType("integer")
                        .HasColumnName("team_size");

                    b.Property<int>("TotalPlayersInSample")
                        .HasColumnType("integer")
                        .HasColumnName("total_players_in_sample");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Breakpoints")
                        .HasDatabaseName("gin_idx_rating_percentile_breakpoints_breakpoints");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Breakpoints"), "gin");

                    b.ToTable("rating_percentile_breakpoints", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.RatingPercentileBreakpointsArchive", b =>
                {
                    b.Property<Guid>("ArchiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("archive_id");

                    b.Property<DateTime>("ArchivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("archived_at");

                    b.Property<Guid?>("ArchivedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("archived_by");

                    b.Property<Dictionary<RatingTier, double>>("Breakpoints")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("breakpoints");

                    b.Property<DateTime>("CalculatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("calculated_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<Guid?>("SeasonId")
                        .HasColumnType("uuid")
                        .HasColumnName("season_id");

                    b.Property<int>("TeamSize")
                        .HasColumnType("integer")
                        .HasColumnName("team_size");

                    b.Property<int>("TotalPlayersInSample")
                        .HasColumnType("integer")
                        .HasColumnName("total_players_in_sample");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("ArchiveId");

                    b.HasIndex("ArchivedAt")
                        .HasDatabaseName("idx_rating_percentile_breakpoints_archive_archived_at");

                    b.HasIndex("EntityId", "Version")
                        .HasDatabaseName("idx_rating_percentile_breakpoints_archive_entity_version");

                    b.ToTable("rating_percentile_breakpoints_archive", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.Replay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AllowObservers")
                        .HasColumnType("text")
                        .HasColumnName("allow_observers");

                    b.Property<string>("CombatRule")
                        .HasColumnType("text")
                        .HasColumnName("combat_rule");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int?>("DurationSeconds")
                        .HasColumnType("integer")
                        .HasColumnName("duration_seconds");

                    b.Property<string>("EnvironmentSettings")
                        .HasColumnType("text")
                        .HasColumnName("environment_settings");

                    b.Property<string>("FilePath")
                        .HasColumnType("text")
                        .HasColumnName("file_path");

                    b.Property<long?>("FileSizeBytes")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size_bytes");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_id");

                    b.Property<string>("GameMode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("game_mode");

                    b.Property<string>("GameType")
                        .HasColumnType("text")
                        .HasColumnName("game_type");

                    b.Property<string>("IncomeRate")
                        .HasColumnType("text")
                        .HasColumnName("income_rate");

                    b.Property<string>("InitMoney")
                        .HasColumnType("text")
                        .HasColumnName("init_money");

                    b.Property<string>("Map")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("map");

                    b.Property<Guid>("MatchId")
                        .HasColumnType("uuid")
                        .HasColumnName("match_id");

                    b.Property<string>("ModList")
                        .HasColumnType("text")
                        .HasColumnName("mod_list");

                    b.Property<string>("ModTagList")
                        .HasColumnType("text")
                        .HasColumnName("mod_tag_list");

                    b.Property<string>("ObserverDelay")
                        .HasColumnType("text")
                        .HasColumnName("observer_delay");

                    b.Property<string>("OriginalFilename")
                        .HasColumnType("text")
                        .HasColumnName("original_filename");

                    b.PrimitiveCollection<Guid[]>("PlayerIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("player_ids");

                    b.Property<string>("Private")
                        .HasColumnType("text")
                        .HasColumnName("private");

                    b.Property<string>("ScoreLimit")
                        .HasColumnType("text")
                        .HasColumnName("score_limit");

                    b.Property<string>("Seed")
                        .HasColumnType("text")
                        .HasColumnName("seed");

                    b.Property<string>("ServerName")
                        .HasColumnType("text")
                        .HasColumnName("server_name");

                    b.Property<string>("TimeLimit")
                        .HasColumnType("text")
                        .HasColumnName("time_limit");

                    b.Property<string>("UniqueSessionId")
                        .HasColumnType("text")
                        .HasColumnName("unique_session_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Upkeep")
                        .HasColumnType("text")
                        .HasColumnName("upkeep");

                    b.Property<string>("Version")
                        .HasColumnType("text")
                        .HasColumnName("version");

                    b.Property<string>("VictoryCode")
                        .HasColumnType("text")
                        .HasColumnName("victory_code");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("replays", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.ReplayArchive", b =>
                {
                    b.Property<Guid>("ArchiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("archive_id");

                    b.Property<string>("AllowObservers")
                        .HasColumnType("text")
                        .HasColumnName("allow_observers");

                    b.Property<DateTime>("ArchivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("archived_at");

                    b.Property<Guid?>("ArchivedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("archived_by");

                    b.Property<string>("CombatRule")
                        .HasColumnType("text")
                        .HasColumnName("combat_rule");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int?>("DurationSeconds")
                        .HasColumnType("integer")
                        .HasColumnName("duration_seconds");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.Property<string>("EnvironmentSettings")
                        .HasColumnType("text")
                        .HasColumnName("environment_settings");

                    b.Property<string>("FilePath")
                        .HasColumnType("text")
                        .HasColumnName("file_path");

                    b.Property<long?>("FileSizeBytes")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size_bytes");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_id");

                    b.Property<string>("GameMode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("game_mode");

                    b.Property<string>("GameType")
                        .HasColumnType("text")
                        .HasColumnName("game_type");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("IncomeRate")
                        .HasColumnType("text")
                        .HasColumnName("income_rate");

                    b.Property<string>("InitMoney")
                        .HasColumnType("text")
                        .HasColumnName("init_money");

                    b.Property<string>("Map")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("map");

                    b.Property<Guid>("MatchId")
                        .HasColumnType("uuid")
                        .HasColumnName("match_id");

                    b.Property<string>("ModList")
                        .HasColumnType("text")
                        .HasColumnName("mod_list");

                    b.Property<string>("ModTagList")
                        .HasColumnType("text")
                        .HasColumnName("mod_tag_list");

                    b.Property<string>("ObserverDelay")
                        .HasColumnType("text")
                        .HasColumnName("observer_delay");

                    b.Property<string>("OriginalFilename")
                        .HasColumnType("text")
                        .HasColumnName("original_filename");

                    b.PrimitiveCollection<Guid[]>("PlayerIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("player_ids");

                    b.Property<string>("Private")
                        .HasColumnType("text")
                        .HasColumnName("private");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<string>("ScoreLimit")
                        .HasColumnType("text")
                        .HasColumnName("score_limit");

                    b.Property<string>("Seed")
                        .HasColumnType("text")
                        .HasColumnName("seed");

                    b.Property<string>("ServerName")
                        .HasColumnType("text")
                        .HasColumnName("server_name");

                    b.Property<string>("TimeLimit")
                        .HasColumnType("text")
                        .HasColumnName("time_limit");

                    b.Property<string>("UniqueSessionId")
                        .HasColumnType("text")
                        .HasColumnName("unique_session_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Upkeep")
                        .HasColumnType("text")
                        .HasColumnName("upkeep");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<string>("VictoryCode")
                        .HasColumnType("text")
                        .HasColumnName("victory_code");

                    b.HasKey("ArchiveId");

                    b.HasIndex("ArchivedAt")
                        .HasDatabaseName("idx_replays_archive_archived_at");

                    b.HasIndex("EntityId", "Version")
                        .HasDatabaseName("idx_replays_archive_entity_version");

                    b.ToTable("replays_archive", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.ReplayPlayer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("PlayerAlliance")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("player_alliance");

                    b.Property<string>("PlayerAvatar")
                        .HasColumnType("text")
                        .HasColumnName("player_avatar");

                    b.Property<string>("PlayerDeckContent")
                        .HasColumnType("text")
                        .HasColumnName("player_deck_content");

                    b.Property<string>("PlayerDeckName")
                        .HasColumnType("text")
                        .HasColumnName("player_deck_name");

                    b.Property<string>("PlayerElo")
                        .HasColumnType("text")
                        .HasColumnName("player_elo");

                    b.Property<string>("PlayerIncomeRate")
                        .HasColumnType("text")
                        .HasColumnName("player_income_rate");

                    b.Property<string>("PlayerLevel")
                        .HasColumnType("text")
                        .HasColumnName("player_level");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("player_name");

                    b.Property<string>("PlayerReady")
                        .HasColumnType("text")
                        .HasColumnName("player_ready");

                    b.Property<string>("PlayerScoreLimit")
                        .HasColumnType("text")
                        .HasColumnName("player_score_limit");

                    b.Property<string>("PlayerUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("player_user_id");

                    b.Property<Guid>("ReplayId")
                        .HasColumnType("uuid")
                        .HasColumnName("replay_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReplayId")
                        .HasDatabaseName("idx_replay_players_replay_id");

                    b.ToTable("replay_players", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.ReplayPlayerArchive", b =>
                {
                    b.Property<Guid>("ArchiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("archive_id");

                    b.Property<DateTime>("ArchivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("archived_at");

                    b.Property<Guid?>("ArchivedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("archived_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("PlayerAlliance")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("player_alliance");

                    b.Property<string>("PlayerAvatar")
                        .HasColumnType("text")
                        .HasColumnName("player_avatar");

                    b.Property<string>("PlayerDeckContent")
                        .HasColumnType("text")
                        .HasColumnName("player_deck_content");

                    b.Property<string>("PlayerDeckName")
                        .HasColumnType("text")
                        .HasColumnName("player_deck_name");

                    b.Property<string>("PlayerElo")
                        .HasColumnType("text")
                        .HasColumnName("player_elo");

                    b.Property<string>("PlayerIncomeRate")
                        .HasColumnType("text")
                        .HasColumnName("player_income_rate");

                    b.Property<string>("PlayerLevel")
                        .HasColumnType("text")
                        .HasColumnName("player_level");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("player_name");

                    b.Property<string>("PlayerReady")
                        .HasColumnType("text")
                        .HasColumnName("player_ready");

                    b.Property<string>("PlayerScoreLimit")
                        .HasColumnType("text")
                        .HasColumnName("player_score_limit");

                    b.Property<string>("PlayerUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("player_user_id");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<Guid>("ReplayId")
                        .HasColumnType("uuid")
                        .HasColumnName("replay_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("ArchiveId");

                    b.HasIndex("ArchivedAt")
                        .HasDatabaseName("idx_replay_players_archive_archived_at");

                    b.HasIndex("EntityId", "Version")
                        .HasDatabaseName("idx_replay_players_archive_entity_version");

                    b.ToTable("replay_players_archive", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.ScrimmageArchive", b =>
                {
                    b.Property<Guid>("ArchiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("archive_id");

                    b.Property<Guid>("AcceptedByPlayerId")
                        .HasColumnType("uuid")
                        .HasColumnName("accepted_by_player_id");

                    b.Property<DateTime>("ArchivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("archived_at");

                    b.Property<Guid?>("ArchivedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("archived_by");

                    b.Property<int>("BestOf")
                        .HasColumnType("integer")
                        .HasColumnName("best_of");

                    b.Property<double?>("ChallengerTeamAdjustedRatingChange")
                        .HasColumnType("double precision")
                        .HasColumnName("challenger_team_adjusted_rating_change");

                    b.Property<double?>("ChallengerTeamCatchUpBonusUsed")
                        .HasColumnType("double precision")
                        .HasColumnName("challenger_team_catch_up_bonus_used");

                    b.Property<double>("ChallengerTeamConfidence")
                        .HasColumnType("double precision")
                        .HasColumnName("challenger_team_confidence");

                    b.Property<double?>("ChallengerTeamGapScalingAppliedValue")
                        .HasColumnType("double precision")
                        .HasColumnName("challenger_team_gap_scaling_applied_value");

                    b.Property<Guid>("ChallengerTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("challenger_team_id");

                    b.Property<double?>("ChallengerTeamMultiplierUsed")
                        .HasColumnType("double precision")
                        .HasColumnName("challenger_team_multiplier_used");

                    b.Property<bool>("ChallengerTeamProvenPotentialApplied")
                        .HasColumnType("boolean")
                        .HasColumnName("challenger_team_proven_potential_applied");

                    b.Property<DateTime?>("ChallengerTeamProvenPotentialAppliedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("challenger_team_proven_potential_applied_at");

                    b.Property<double>("ChallengerTeamRating")
                        .HasColumnType("double precision")
                        .HasColumnName("challenger_team_rating");

                    b.Property<double?>("ChallengerTeamRatingChange")
                        .HasColumnType("double precision")
                        .HasColumnName("challenger_team_rating_change");

                    b.Property<int?>("ChallengerTeamScore")
                        .HasColumnType("integer")
                        .HasColumnName("challenger_team_score");

                    b.Property<double?>("ChallengerTeamVarietyBonusUsed")
                        .HasColumnType("double precision")
                        .HasColumnName("challenger_team_variety_bonus_used");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.Property<Guid>("HigherRatedTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("higher_rated_team_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IssuedByPlayerId")
                        .HasColumnType("uuid")
                        .HasColumnName("issued_by_player_id");

                    b.Property<Guid?>("MatchId")
                        .HasColumnType("uuid")
                        .HasColumnName("match_id");

                    b.Property<double?>("OpponentTeamAdjustedRatingChange")
                        .HasColumnType("double precision")
                        .HasColumnName("opponent_team_adjusted_rating_change");

                    b.Property<double?>("OpponentTeamCatchUpBonusUsed")
                        .HasColumnType("double precision")
                        .HasColumnName("opponent_team_catch_up_bonus_used");

                    b.Property<double>("OpponentTeamConfidence")
                        .HasColumnType("double precision")
                        .HasColumnName("opponent_team_confidence");

                    b.Property<double?>("OpponentTeamGapScalingAppliedValue")
                        .HasColumnType("double precision")
                        .HasColumnName("opponent_team_gap_scaling_applied_value");

                    b.Property<Guid>("OpponentTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("opponent_team_id");

                    b.Property<double?>("OpponentTeamMultiplierUsed")
                        .HasColumnType("double precision")
                        .HasColumnName("opponent_team_multiplier_used");

                    b.Property<bool>("OpponentTeamProvenPotentialApplied")
                        .HasColumnType("boolean")
                        .HasColumnName("opponent_team_proven_potential_applied");

                    b.Property<DateTime?>("OpponentTeamProvenPotentialAppliedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("opponent_team_proven_potential_applied_at");

                    b.Property<double>("OpponentTeamRating")
                        .HasColumnType("double precision")
                        .HasColumnName("opponent_team_rating");

                    b.Property<double?>("OpponentTeamRatingChange")
                        .HasColumnType("double precision")
                        .HasColumnName("opponent_team_rating_change");

                    b.Property<int?>("OpponentTeamScore")
                        .HasColumnType("integer")
                        .HasColumnName("opponent_team_score");

                    b.Property<double?>("OpponentTeamVarietyBonusUsed")
                        .HasColumnType("double precision")
                        .HasColumnName("opponent_team_variety_bonus_used");

                    b.Property<double>("RatingRangeAtMatch")
                        .HasColumnType("double precision")
                        .HasColumnName("rating_range_at_match");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<Guid>("ScrimmageChallengeId")
                        .HasColumnType("uuid")
                        .HasColumnName("scrimmage_challenge_id");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<int>("TeamSize")
                        .HasColumnType("integer")
                        .HasColumnName("team_size");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<Guid?>("WinnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("winner_id");

                    b.HasKey("ArchiveId");

                    b.HasIndex("ArchivedAt")
                        .HasDatabaseName("idx_scrimmages_archive_archived_at");

                    b.HasIndex("EntityId", "Version")
                        .HasDatabaseName("idx_scrimmages_archive_entity_version");

                    b.ToTable("scrimmages_archive", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.ScrimmageChallengeArchive", b =>
                {
                    b.Property<Guid>("ArchiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("archive_id");

                    b.Property<Guid?>("AcceptedByPlayerId")
                        .HasColumnType("uuid")
                        .HasColumnName("accepted_by_player_id");

                    b.Property<DateTime>("ArchivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("archived_at");

                    b.Property<Guid?>("ArchivedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("archived_by");

                    b.Property<int>("BestOf")
                        .HasColumnType("integer")
                        .HasColumnName("best_of");

                    b.Property<decimal?>("ChallengeChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("challenge_channel_id");

                    b.Property<DateTime>("ChallengeExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("challenge_expires_at");

                    b.Property<decimal?>("ChallengeMessageId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("challenge_message_id");

                    b.Property<int>("ChallengeStatus")
                        .HasColumnType("integer")
                        .HasColumnName("challenge_status");

                    b.Property<Guid>("ChallengerTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("challenger_team_id");

                    b.PrimitiveCollection<Guid[]>("ChallengerTeammateIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("challenger_teammate_ids");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IssuedByPlayerId")
                        .HasColumnType("uuid")
                        .HasColumnName("issued_by_player_id");

                    b.Property<Guid>("OpponentTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("opponent_team_id");

                    b.PrimitiveCollection<Guid[]>("OpponentTeammateIds")
                        .HasColumnType("uuid[]")
                        .HasColumnName("opponent_teammate_ids");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<int>("TeamSize")
                        .HasColumnType("integer")
                        .HasColumnName("team_size");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("ArchiveId");

                    b.HasIndex("ArchivedAt")
                        .HasDatabaseName("idx_scrimmage_challenges_archive_archived_at");

                    b.HasIndex("EntityId", "Version")
                        .HasDatabaseName("idx_scrimmage_challenges_archive_entity_version");

                    b.ToTable("scrimmage_challenges_archive", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.ScrimmageLeaderboardArchive", b =>
                {
                    b.Property<Guid>("ArchiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("archive_id");

                    b.Property<DateTime>("ArchivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("archived_at");

                    b.Property<Guid?>("ArchivedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("archived_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<Guid[]>("LeaderboardItemIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("leaderboard_item_ids");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uuid")
                        .HasColumnName("season_id");

                    b.Property<int>("TeamSize")
                        .HasColumnType("integer")
                        .HasColumnName("team_size");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("ArchiveId");

                    b.HasIndex("ArchivedAt")
                        .HasDatabaseName("idx_scrimmage_leaderboards_archive_archived_at");

                    b.HasIndex("EntityId", "Version")
                        .HasDatabaseName("idx_scrimmage_leaderboards_archive_entity_version");

                    b.ToTable("scrimmage_leaderboards_archive", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.ScrimmageLeaderboardItemArchive", b =>
                {
                    b.Property<Guid>("ArchiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("archive_id");

                    b.Property<DateTime>("ArchivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("archived_at");

                    b.Property<Guid?>("ArchivedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("archived_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Draws")
                        .HasColumnType("integer")
                        .HasColumnName("draws");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<int>("Losses")
                        .HasColumnType("integer")
                        .HasColumnName("losses");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.PrimitiveCollection<List<Guid>>("PlayerIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("player_ids");

                    b.Property<int>("Rank")
                        .HasColumnType("integer")
                        .HasColumnName("rank");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision")
                        .HasColumnName("rating");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<double>("RecentRatingChange")
                        .HasColumnType("double precision")
                        .HasColumnName("recent_rating_change");

                    b.Property<Guid>("ScrimmageLeaderboardId")
                        .HasColumnType("uuid")
                        .HasColumnName("scrimmage_leaderboard_id");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("Wins")
                        .HasColumnType("integer")
                        .HasColumnName("wins");

                    b.HasKey("ArchiveId");

                    b.HasIndex("ArchivedAt")
                        .HasDatabaseName("idx_scrimmage_leaderboard_items_archive_archived_at");

                    b.HasIndex("EntityId", "Version")
                        .HasDatabaseName("idx_scrimmage_leaderboard_items_archive_entity_version");

                    b.ToTable("scrimmage_leaderboard_items_archive", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.ScrimmageStateSnapshotArchive", b =>
                {
                    b.Property<Guid>("ArchiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("archive_id");

                    b.Property<DateTime>("ArchivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("archived_at");

                    b.Property<Guid?>("ArchivedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("archived_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<Guid>("ScrimmageId")
                        .HasColumnType("uuid")
                        .HasColumnName("scrimmage_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("ArchiveId");

                    b.HasIndex("ArchivedAt")
                        .HasDatabaseName("idx_scrimmage_state_snapshots_archive_archived_at");

                    b.HasIndex("EntityId", "Version")
                        .HasDatabaseName("idx_scrimmage_state_snapshots_archive_entity_version");

                    b.ToTable("scrimmage_state_snapshots_archive", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.ScrimmageTeamStats", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("Confidence")
                        .HasColumnType("double precision")
                        .HasColumnName("confidence");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<double>("CurrentRating")
                        .HasColumnType("double precision")
                        .HasColumnName("current_rating");

                    b.Property<int>("CurrentStreak")
                        .HasColumnType("integer")
                        .HasColumnName("current_streak");

                    b.Property<int>("Draws")
                        .HasColumnType("integer")
                        .HasColumnName("draws");

                    b.Property<double>("HighestRating")
                        .HasColumnType("double precision")
                        .HasColumnName("highest_rating");

                    b.Property<double>("InitialRating")
                        .HasColumnType("double precision")
                        .HasColumnName("initial_rating");

                    b.Property<DateTime>("LastMatchAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_match_at");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<int>("LongestStreak")
                        .HasColumnType("integer")
                        .HasColumnName("longest_streak");

                    b.Property<int>("Losses")
                        .HasColumnType("integer")
                        .HasColumnName("losses");

                    b.PrimitiveCollection<Guid[]>("OpponentEncounterIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("opponent_encounter_ids");

                    b.Property<double>("RecentRatingChange")
                        .HasColumnType("double precision")
                        .HasColumnName("recent_rating_change");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<int>("TeamSize")
                        .HasColumnType("integer")
                        .HasColumnName("team_size");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Wins")
                        .HasColumnType("integer")
                        .HasColumnName("wins");

                    b.HasKey("Id");

                    b.ToTable("scrimmage_team_stats", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.ScrimmageTeamStatsArchive", b =>
                {
                    b.Property<Guid>("ArchiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("archive_id");

                    b.Property<DateTime>("ArchivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("archived_at");

                    b.Property<Guid?>("ArchivedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("archived_by");

                    b.Property<double>("Confidence")
                        .HasColumnType("double precision")
                        .HasColumnName("confidence");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<double>("CurrentRating")
                        .HasColumnType("double precision")
                        .HasColumnName("current_rating");

                    b.Property<int>("CurrentStreak")
                        .HasColumnType("integer")
                        .HasColumnName("current_streak");

                    b.Property<int>("Draws")
                        .HasColumnType("integer")
                        .HasColumnName("draws");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.Property<double>("HighestRating")
                        .HasColumnType("double precision")
                        .HasColumnName("highest_rating");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<double>("InitialRating")
                        .HasColumnType("double precision")
                        .HasColumnName("initial_rating");

                    b.Property<DateTime>("LastMatchAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_match_at");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<int>("LongestStreak")
                        .HasColumnType("integer")
                        .HasColumnName("longest_streak");

                    b.Property<int>("Losses")
                        .HasColumnType("integer")
                        .HasColumnName("losses");

                    b.PrimitiveCollection<Guid[]>("OpponentEncounterIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("opponent_encounter_ids");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<double>("RecentRatingChange")
                        .HasColumnType("double precision")
                        .HasColumnName("recent_rating_change");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<int>("TeamSize")
                        .HasColumnType("integer")
                        .HasColumnName("team_size");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("Wins")
                        .HasColumnType("integer")
                        .HasColumnName("wins");

                    b.HasKey("ArchiveId");

                    b.HasIndex("ArchivedAt")
                        .HasDatabaseName("idx_scrimmage_team_stats_archive_archived_at");

                    b.HasIndex("EntityId", "Version")
                        .HasDatabaseName("idx_scrimmage_team_stats_archive_entity_version");

                    b.ToTable("scrimmage_team_stats_archive", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.SeasonArchive", b =>
                {
                    b.Property<Guid>("ArchiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("archive_id");

                    b.Property<DateTime>("ArchivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("archived_at");

                    b.Property<Guid?>("ArchivedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("archived_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.PrimitiveCollection<Guid[]>("ScrimmageLeaderboardIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("scrimmage_leaderboard_ids");

                    b.Property<Guid>("SeasonConfigId")
                        .HasColumnType("uuid")
                        .HasColumnName("season_config_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.PrimitiveCollection<Guid[]>("TournamentLeaderboardIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("tournament_leaderboard_ids");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("ArchiveId");

                    b.HasIndex("ArchivedAt")
                        .HasDatabaseName("idx_seasons_archive_archived_at");

                    b.HasIndex("EntityId", "Version")
                        .HasDatabaseName("idx_seasons_archive_entity_version");

                    b.ToTable("seasons_archive", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.SeasonConfigArchive", b =>
                {
                    b.Property<Guid>("ArchiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("archive_id");

                    b.Property<DateTime>("ArchivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("archived_at");

                    b.Property<Guid?>("ArchivedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("archived_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<bool>("ResetScrimmageRatingsOnStart")
                        .HasColumnType("boolean")
                        .HasColumnName("reset_scrimmage_ratings_on_start");

                    b.Property<bool>("ResetTournamentRatingsOnStart")
                        .HasColumnType("boolean")
                        .HasColumnName("reset_tournament_ratings_on_start");

                    b.Property<double>("ScrimmageDecayRatePerWeek")
                        .HasColumnType("double precision")
                        .HasColumnName("scrimmage_decay_rate_per_week");

                    b.Property<bool>("ScrimmageRatingDecay")
                        .HasColumnType("boolean")
                        .HasColumnName("scrimmage_rating_decay");

                    b.Property<double>("TournamentDecayRatePerWeek")
                        .HasColumnType("double precision")
                        .HasColumnName("tournament_decay_rate_per_week");

                    b.Property<bool>("TournamentRatingDecay")
                        .HasColumnType("boolean")
                        .HasColumnName("tournament_rating_decay");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("ArchiveId");

                    b.HasIndex("ArchivedAt")
                        .HasDatabaseName("idx_season_configs_archive_archived_at");

                    b.HasIndex("EntityId", "Version")
                        .HasDatabaseName("idx_season_configs_archive_entity_version");

                    b.ToTable("season_configs_archive", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Dictionary<TeamSize, ScrimmageTeamStats>>("ScrimmageTeamStats")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("scrimmage_team_stats");

                    b.Property<string>("Tag")
                        .HasColumnType("text")
                        .HasColumnName("tag");

                    b.Property<Guid>("TeamMajorId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_major_id");

                    b.Property<int>("TeamType")
                        .HasColumnType("integer")
                        .HasColumnName("team_type");

                    b.Property<Dictionary<TeamSize, TournamentTeamStats>>("TournamentTeamStats")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("tournament_team_stats");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ScrimmageTeamStats")
                        .HasDatabaseName("gin_idx_teams_scrimmage_team_stats");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("ScrimmageTeamStats"), "gin");

                    b.HasIndex("TournamentTeamStats")
                        .HasDatabaseName("gin_idx_teams_tournament_team_stats");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("TournamentTeamStats"), "gin");

                    b.ToTable("teams", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.TeamArchive", b =>
                {
                    b.Property<Guid>("ArchiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("archive_id");

                    b.Property<DateTime>("ArchivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("archived_at");

                    b.Property<Guid?>("ArchivedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("archived_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<Dictionary<TeamSize, ScrimmageTeamStats>>("ScrimmageTeamStats")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("scrimmage_team_stats");

                    b.Property<string>("Tag")
                        .HasColumnType("text")
                        .HasColumnName("tag");

                    b.Property<Guid>("TeamMajorId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_major_id");

                    b.Property<int>("TeamType")
                        .HasColumnType("integer")
                        .HasColumnName("team_type");

                    b.Property<Dictionary<TeamSize, TournamentTeamStats>>("TournamentTeamStats")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("tournament_team_stats");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("ArchiveId");

                    b.HasIndex("ArchivedAt")
                        .HasDatabaseName("idx_teams_archive_archived_at");

                    b.HasIndex("EntityId", "Version")
                        .HasDatabaseName("idx_teams_archive_entity_version");

                    b.ToTable("teams_archive", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.TeamMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("DiscordUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("discord_user_id");

                    b.Property<bool>("IsRosterManager")
                        .HasColumnType("boolean")
                        .HasColumnName("is_roster_manager");

                    b.Property<Guid>("MashinaUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("mashina_user_id");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uuid")
                        .HasColumnName("player_id");

                    b.Property<bool>("ReceiveScrimmagePings")
                        .HasColumnType("boolean")
                        .HasColumnName("receive_scrimmage_pings");

                    b.Property<int?>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<Guid>("TeamRosterId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_roster_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("valid_from");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("valid_to");

                    b.HasKey("Id");

                    b.HasIndex("MashinaUserId")
                        .HasDatabaseName("idx_team_members_mashina_user_id");

                    b.HasIndex("TeamRosterId")
                        .HasDatabaseName("idx_team_members_team_roster_id");

                    b.HasIndex("TeamRosterId", "PlayerId")
                        .IsUnique()
                        .HasDatabaseName("ux_team_members_active_roster_player")
                        .HasFilter("valid_to IS NULL");

                    b.ToTable("team_members", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.TeamMemberArchive", b =>
                {
                    b.Property<Guid>("ArchiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("archive_id");

                    b.Property<DateTime>("ArchivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("archived_at");

                    b.Property<Guid?>("ArchivedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("archived_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("DiscordUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("discord_user_id");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRosterManager")
                        .HasColumnType("boolean")
                        .HasColumnName("is_roster_manager");

                    b.Property<Guid>("MashinaUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("mashina_user_id");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uuid")
                        .HasColumnName("player_id");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<bool>("ReceiveScrimmagePings")
                        .HasColumnType("boolean")
                        .HasColumnName("receive_scrimmage_pings");

                    b.Property<int?>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<Guid>("TeamRosterId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_roster_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("valid_from");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("valid_to");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("ArchiveId");

                    b.HasIndex("ArchivedAt")
                        .HasDatabaseName("idx_team_members_archive_archived_at");

                    b.HasIndex("EntityId", "Version")
                        .HasDatabaseName("idx_team_members_archive_entity_version");

                    b.ToTable("team_members_archive", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.TeamOpponentEncounter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EncounteredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("encountered_at");

                    b.Property<Guid>("MatchId")
                        .HasColumnType("uuid")
                        .HasColumnName("match_id");

                    b.Property<Guid>("OpponentId")
                        .HasColumnType("uuid")
                        .HasColumnName("opponent_id");

                    b.Property<Guid?>("ScrimmageTeamStatsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<int>("TeamSize")
                        .HasColumnType("integer")
                        .HasColumnName("team_size");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Won")
                        .HasColumnType("boolean")
                        .HasColumnName("won");

                    b.HasKey("Id");

                    b.HasIndex("MatchId")
                        .HasDatabaseName("idx_team_opponent_encounters_match_id");

                    b.HasIndex("OpponentId")
                        .HasDatabaseName("idx_team_opponent_encounters_opponent_id");

                    b.HasIndex("ScrimmageTeamStatsId");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("idx_team_opponent_encounters_team_id");

                    b.ToTable("team_opponent_encounters", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.TeamOpponentEncounterArchive", b =>
                {
                    b.Property<Guid>("ArchiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("archive_id");

                    b.Property<DateTime>("ArchivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("archived_at");

                    b.Property<Guid?>("ArchivedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("archived_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EncounteredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("encountered_at");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MatchId")
                        .HasColumnType("uuid")
                        .HasColumnName("match_id");

                    b.Property<Guid>("OpponentId")
                        .HasColumnType("uuid")
                        .HasColumnName("opponent_id");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<int>("TeamSize")
                        .HasColumnType("integer")
                        .HasColumnName("team_size");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<bool>("Won")
                        .HasColumnType("boolean")
                        .HasColumnName("won");

                    b.HasKey("ArchiveId");

                    b.HasIndex("ArchivedAt")
                        .HasDatabaseName("idx_team_opponent_encounters_archive_archived_at");

                    b.HasIndex("EntityId", "Version")
                        .HasDatabaseName("idx_team_opponent_encounters_archive_entity_version");

                    b.ToTable("team_opponent_encounters_archive", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.TeamRoster", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CaptainChangedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("captain_changed_at");

                    b.Property<DateTime?>("CoreRoleChangedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("core_role_changed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_active");

                    b.Property<int>("MaxRosterSize")
                        .HasColumnType("integer")
                        .HasColumnName("max_roster_size");

                    b.Property<int>("RosterGroup")
                        .HasColumnType("integer")
                        .HasColumnName("roster_group");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("idx_team_rosters_team_id");

                    b.ToTable("team_rosters", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.TeamRosterArchive", b =>
                {
                    b.Property<Guid>("ArchiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("archive_id");

                    b.Property<DateTime>("ArchivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("archived_at");

                    b.Property<Guid?>("ArchivedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("archived_by");

                    b.Property<DateTime?>("CaptainChangedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("captain_changed_at");

                    b.Property<DateTime?>("CoreRoleChangedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("core_role_changed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_active");

                    b.Property<int>("MaxRosterSize")
                        .HasColumnType("integer")
                        .HasColumnName("max_roster_size");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<int>("RosterGroup")
                        .HasColumnType("integer")
                        .HasColumnName("roster_group");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("ArchiveId");

                    b.HasIndex("ArchivedAt")
                        .HasDatabaseName("idx_team_rosters_archive_archived_at");

                    b.HasIndex("EntityId", "Version")
                        .HasDatabaseName("idx_team_rosters_archive_entity_version");

                    b.ToTable("team_rosters_archive", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.TeamVarietyStats", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("AvailabilityFactorUsed")
                        .HasColumnType("double precision")
                        .HasColumnName("availability_factor_used");

                    b.Property<double>("AverageVarietyEntropyAtCalc")
                        .HasColumnType("double precision")
                        .HasColumnName("average_variety_entropy_at_calc");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastCalculated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_calculated");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<int>("MaxNeighborsObservedAtCalc")
                        .HasColumnType("integer")
                        .HasColumnName("max_neighbors_observed_at_calc");

                    b.Property<double>("MedianGamesAtCalc")
                        .HasColumnType("double precision")
                        .HasColumnName("median_games_at_calc");

                    b.Property<double>("NeighborRangeAtCalc")
                        .HasColumnType("double precision")
                        .HasColumnName("neighbor_range_at_calc");

                    b.Property<int>("PlayerNeighborsAtCalc")
                        .HasColumnType("integer")
                        .HasColumnName("player_neighbors_at_calc");

                    b.Property<double>("RatingRangeAtCalc")
                        .HasColumnType("double precision")
                        .HasColumnName("rating_range_at_calc");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<int>("TeamSize")
                        .HasColumnType("integer")
                        .HasColumnName("team_size");

                    b.Property<int>("TotalOpponents")
                        .HasColumnType("integer")
                        .HasColumnName("total_opponents");

                    b.Property<int>("UniqueOpponents")
                        .HasColumnType("integer")
                        .HasColumnName("unique_opponents");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<double>("VarietyBonus")
                        .HasColumnType("double precision")
                        .HasColumnName("variety_bonus");

                    b.Property<double>("VarietyEntropy")
                        .HasColumnType("double precision")
                        .HasColumnName("variety_entropy");

                    b.HasKey("Id");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("idx_team_variety_stats_team_id");

                    b.ToTable("team_variety_stats", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.TeamVarietyStatsArchive", b =>
                {
                    b.Property<Guid>("ArchiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("archive_id");

                    b.Property<DateTime>("ArchivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("archived_at");

                    b.Property<Guid?>("ArchivedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("archived_by");

                    b.Property<double>("AvailabilityFactorUsed")
                        .HasColumnType("double precision")
                        .HasColumnName("availability_factor_used");

                    b.Property<double>("AverageVarietyEntropyAtCalc")
                        .HasColumnType("double precision")
                        .HasColumnName("average_variety_entropy_at_calc");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastCalculated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_calculated");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<int>("MaxNeighborsObservedAtCalc")
                        .HasColumnType("integer")
                        .HasColumnName("max_neighbors_observed_at_calc");

                    b.Property<double>("MedianGamesAtCalc")
                        .HasColumnType("double precision")
                        .HasColumnName("median_games_at_calc");

                    b.Property<double>("NeighborRangeAtCalc")
                        .HasColumnType("double precision")
                        .HasColumnName("neighbor_range_at_calc");

                    b.Property<int>("PlayerNeighborsAtCalc")
                        .HasColumnType("integer")
                        .HasColumnName("player_neighbors_at_calc");

                    b.Property<double>("RatingRangeAtCalc")
                        .HasColumnType("double precision")
                        .HasColumnName("rating_range_at_calc");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<int>("TeamSize")
                        .HasColumnType("integer")
                        .HasColumnName("team_size");

                    b.Property<int>("TotalOpponents")
                        .HasColumnType("integer")
                        .HasColumnName("total_opponents");

                    b.Property<int>("UniqueOpponents")
                        .HasColumnType("integer")
                        .HasColumnName("unique_opponents");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<double>("VarietyBonus")
                        .HasColumnType("double precision")
                        .HasColumnName("variety_bonus");

                    b.Property<double>("VarietyEntropy")
                        .HasColumnType("double precision")
                        .HasColumnName("variety_entropy");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("ArchiveId");

                    b.HasIndex("ArchivedAt")
                        .HasDatabaseName("idx_team_variety_stats_archive_archived_at");

                    b.HasIndex("EntityId", "Version")
                        .HasDatabaseName("idx_team_variety_stats_archive_entity_version");

                    b.ToTable("team_variety_stats_archive", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.TournamentArchive", b =>
                {
                    b.Property<Guid>("ArchiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("archive_id");

                    b.Property<DateTime>("ArchivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("archived_at");

                    b.Property<Guid?>("ArchivedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("archived_by");

                    b.Property<int>("BestOf")
                        .HasColumnType("integer")
                        .HasColumnName("best_of");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("integer")
                        .HasColumnName("max_participants");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.PrimitiveCollection<Guid[]>("StateHistoryIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("state_history_ids");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("TeamSize")
                        .HasColumnType("integer")
                        .HasColumnName("team_size");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("ArchiveId");

                    b.HasIndex("ArchivedAt")
                        .HasDatabaseName("idx_tournaments_archive_archived_at");

                    b.HasIndex("EntityId", "Version")
                        .HasDatabaseName("idx_tournaments_archive_entity_version");

                    b.ToTable("tournaments_archive", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.TournamentLeaderboardArchive", b =>
                {
                    b.Property<Guid>("ArchiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("archive_id");

                    b.Property<DateTime>("ArchivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("archived_at");

                    b.Property<Guid?>("ArchivedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("archived_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<Guid[]>("LeaderboardItemIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("leaderboard_item_ids");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uuid")
                        .HasColumnName("season_id");

                    b.Property<int>("TeamSize")
                        .HasColumnType("integer")
                        .HasColumnName("team_size");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("ArchiveId");

                    b.HasIndex("ArchivedAt")
                        .HasDatabaseName("idx_tournament_leaderboards_archive_archived_at");

                    b.HasIndex("EntityId", "Version")
                        .HasDatabaseName("idx_tournament_leaderboards_archive_entity_version");

                    b.ToTable("tournament_leaderboards_archive", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.TournamentLeaderboardItemArchive", b =>
                {
                    b.Property<Guid>("ArchiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("archive_id");

                    b.Property<DateTime>("ArchivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("archived_at");

                    b.Property<Guid?>("ArchivedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("archived_by");

                    b.Property<double>("AveragePlacement")
                        .HasColumnType("double precision")
                        .HasColumnName("average_placement");

                    b.Property<int>("BestPlacement")
                        .HasColumnType("integer")
                        .HasColumnName("best_placement");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.PrimitiveCollection<List<Guid>>("PlayerIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("player_ids");

                    b.Property<int>("Rank")
                        .HasColumnType("integer")
                        .HasColumnName("rank");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision")
                        .HasColumnName("rating");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<double>("RecentRatingChange")
                        .HasColumnType("double precision")
                        .HasColumnName("recent_rating_change");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<Guid>("TournamentLeaderboardId")
                        .HasColumnType("uuid")
                        .HasColumnName("tournament_leaderboard_id");

                    b.PrimitiveCollection<List<int>>("TournamentPlacements")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("tournament_placements");

                    b.Property<int>("TournamentPoints")
                        .HasColumnType("integer")
                        .HasColumnName("tournament_points");

                    b.Property<int>("TournamentsPlayedCount")
                        .HasColumnType("integer")
                        .HasColumnName("tournaments_played_count");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("ArchiveId");

                    b.HasIndex("ArchivedAt")
                        .HasDatabaseName("idx_tournament_leaderboard_items_archive_archived_at");

                    b.HasIndex("EntityId", "Version")
                        .HasDatabaseName("idx_tournament_leaderboard_items_archive_entity_version");

                    b.ToTable("tournament_leaderboard_items_archive", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.TournamentStateSnapshotArchive", b =>
                {
                    b.Property<Guid>("ArchiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("archive_id");

                    b.PrimitiveCollection<List<Guid>>("ActiveMatchIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("active_match_ids");

                    b.Property<Dictionary<string, object>>("AdditionalData")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("additional_data");

                    b.PrimitiveCollection<List<Guid>>("AllMatchIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("all_match_ids");

                    b.Property<DateTime>("ArchivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("archived_at");

                    b.Property<Guid?>("ArchivedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("archived_by");

                    b.Property<string>("CancellationReason")
                        .HasColumnType("text")
                        .HasColumnName("cancellation_reason");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("cancelled_at");

                    b.Property<Guid?>("CancelledByMashinaUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("cancelled_by_mashina_user_id");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.PrimitiveCollection<List<Guid>>("CompletedMatchIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("completed_match_ids");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("CurrentParticipantCount")
                        .HasColumnType("integer")
                        .HasColumnName("current_participant_count");

                    b.Property<int>("CurrentRound")
                        .HasColumnType("integer")
                        .HasColumnName("current_round");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.PrimitiveCollection<List<Guid>>("FinalRankings")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("final_rankings");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("integer")
                        .HasColumnName("max_participants");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.PrimitiveCollection<List<Guid>>("ParticipantTeamIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("participant_team_ids");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.PrimitiveCollection<List<Guid>>("RegisteredTeamIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("registered_team_ids");

                    b.Property<DateTime?>("RegistrationOpenedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registration_opened_at");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<Guid>("TournamentId")
                        .HasColumnType("uuid")
                        .HasColumnName("tournament_id");

                    b.Property<Guid>("TriggeredByMashinaUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("triggered_by_mashina_user_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<Guid?>("WinnerTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("winner_team_id");

                    b.HasKey("ArchiveId");

                    b.HasIndex("ArchivedAt")
                        .HasDatabaseName("idx_tournament_state_snapshots_archive_archived_at");

                    b.HasIndex("EntityId", "Version")
                        .HasDatabaseName("idx_tournament_state_snapshots_archive_entity_version");

                    b.ToTable("tournament_state_snapshots_archive", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.TournamentTeamStats", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("Confidence")
                        .HasColumnType("double precision")
                        .HasColumnName("confidence");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<double>("CurrentRating")
                        .HasColumnType("double precision")
                        .HasColumnName("current_rating");

                    b.Property<int>("GamesDrawn")
                        .HasColumnType("integer")
                        .HasColumnName("games_drawn");

                    b.Property<int>("GamesLost")
                        .HasColumnType("integer")
                        .HasColumnName("games_lost");

                    b.Property<int>("GamesWon")
                        .HasColumnType("integer")
                        .HasColumnName("games_won");

                    b.Property<double>("HighestRating")
                        .HasColumnType("double precision")
                        .HasColumnName("highest_rating");

                    b.Property<double>("InitialRating")
                        .HasColumnType("double precision")
                        .HasColumnName("initial_rating");

                    b.Property<DateTime>("LastMatchAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_match_at");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<int>("MatchesLost")
                        .HasColumnType("integer")
                        .HasColumnName("matches_lost");

                    b.Property<int>("MatchesWon")
                        .HasColumnType("integer")
                        .HasColumnName("matches_won");

                    b.Property<double>("RecentRatingChange")
                        .HasColumnType("double precision")
                        .HasColumnName("recent_rating_change");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<int>("TeamSize")
                        .HasColumnType("integer")
                        .HasColumnName("team_size");

                    b.PrimitiveCollection<List<Guid>>("TournamentIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("tournament_ids");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("idx_tournament_team_stats_team_id");

                    b.ToTable("tournament_team_stats", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.TournamentTeamStatsArchive", b =>
                {
                    b.Property<Guid>("ArchiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("archive_id");

                    b.Property<DateTime>("ArchivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("archived_at");

                    b.Property<Guid?>("ArchivedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("archived_by");

                    b.Property<double>("Confidence")
                        .HasColumnType("double precision")
                        .HasColumnName("confidence");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<double>("CurrentRating")
                        .HasColumnType("double precision")
                        .HasColumnName("current_rating");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.Property<int>("GamesDrawn")
                        .HasColumnType("integer")
                        .HasColumnName("games_drawn");

                    b.Property<int>("GamesLost")
                        .HasColumnType("integer")
                        .HasColumnName("games_lost");

                    b.Property<int>("GamesWon")
                        .HasColumnType("integer")
                        .HasColumnName("games_won");

                    b.Property<double>("HighestRating")
                        .HasColumnType("double precision")
                        .HasColumnName("highest_rating");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<double>("InitialRating")
                        .HasColumnType("double precision")
                        .HasColumnName("initial_rating");

                    b.Property<DateTime>("LastMatchAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_match_at");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<int>("MatchesLost")
                        .HasColumnType("integer")
                        .HasColumnName("matches_lost");

                    b.Property<int>("MatchesWon")
                        .HasColumnType("integer")
                        .HasColumnName("matches_won");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<double>("RecentRatingChange")
                        .HasColumnType("double precision")
                        .HasColumnName("recent_rating_change");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<int>("TeamSize")
                        .HasColumnType("integer")
                        .HasColumnName("team_size");

                    b.PrimitiveCollection<List<Guid>>("TournamentIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("tournament_ids");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("ArchiveId");

                    b.HasIndex("ArchivedAt")
                        .HasDatabaseName("idx_tournament_team_stats_archive_archived_at");

                    b.HasIndex("EntityId", "Version")
                        .HasDatabaseName("idx_tournament_team_stats_archive_entity_version");

                    b.ToTable("tournament_team_stats_archive", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Leaderboard.ScrimmageLeaderboard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<Guid[]>("LeaderboardItemIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("leaderboard_item_ids");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uuid")
                        .HasColumnName("season_id");

                    b.Property<int>("TeamSize")
                        .HasColumnType("integer")
                        .HasColumnName("team_size");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId")
                        .HasDatabaseName("idx_scrimmage_leaderboards_season_id");

                    b.ToTable("scrimmage_leaderboards", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Leaderboard.ScrimmageLeaderboardItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Draws")
                        .HasColumnType("integer")
                        .HasColumnName("draws");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<int>("Losses")
                        .HasColumnType("integer")
                        .HasColumnName("losses");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.PrimitiveCollection<List<Guid>>("PlayerIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("player_ids");

                    b.Property<int>("Rank")
                        .HasColumnType("integer")
                        .HasColumnName("rank");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision")
                        .HasColumnName("rating");

                    b.Property<double>("RecentRatingChange")
                        .HasColumnType("double precision")
                        .HasColumnName("recent_rating_change");

                    b.Property<Guid>("ScrimmageLeaderboardId")
                        .HasColumnType("uuid")
                        .HasColumnName("scrimmage_leaderboard_id");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Wins")
                        .HasColumnType("integer")
                        .HasColumnName("wins");

                    b.HasKey("Id");

                    b.HasIndex("ScrimmageLeaderboardId")
                        .HasDatabaseName("idx_scrimmage_leaderboard_items_scrimmage_leaderboard_id");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("idx_scrimmage_leaderboard_items_team_id");

                    b.ToTable("scrimmage_leaderboard_items", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Leaderboard.Season", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.PrimitiveCollection<Guid[]>("ScrimmageLeaderboardIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("scrimmage_leaderboard_ids");

                    b.Property<Guid>("SeasonConfigId")
                        .HasColumnType("uuid")
                        .HasColumnName("season_config_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.PrimitiveCollection<Guid[]>("TournamentLeaderboardIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("tournament_leaderboard_ids");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SeasonConfigId");

                    b.ToTable("seasons", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Leaderboard.SeasonConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("ResetScrimmageRatingsOnStart")
                        .HasColumnType("boolean")
                        .HasColumnName("reset_scrimmage_ratings_on_start");

                    b.Property<bool>("ResetTournamentRatingsOnStart")
                        .HasColumnType("boolean")
                        .HasColumnName("reset_tournament_ratings_on_start");

                    b.Property<double>("ScrimmageDecayRatePerWeek")
                        .HasColumnType("double precision")
                        .HasColumnName("scrimmage_decay_rate_per_week");

                    b.Property<bool>("ScrimmageRatingDecay")
                        .HasColumnType("boolean")
                        .HasColumnName("scrimmage_rating_decay");

                    b.Property<double>("TournamentDecayRatePerWeek")
                        .HasColumnType("double precision")
                        .HasColumnName("tournament_decay_rate_per_week");

                    b.Property<bool>("TournamentRatingDecay")
                        .HasColumnType("boolean")
                        .HasColumnName("tournament_rating_decay");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("season_configs", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Leaderboard.TournamentLeaderboard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<Guid[]>("LeaderboardItemIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("leaderboard_item_ids");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uuid")
                        .HasColumnName("season_id");

                    b.Property<int>("TeamSize")
                        .HasColumnType("integer")
                        .HasColumnName("team_size");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId")
                        .HasDatabaseName("idx_tournament_leaderboards_season_id");

                    b.ToTable("tournament_leaderboards", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Leaderboard.TournamentLeaderboardItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("AveragePlacement")
                        .HasColumnType("double precision")
                        .HasColumnName("average_placement");

                    b.Property<int>("BestPlacement")
                        .HasColumnType("integer")
                        .HasColumnName("best_placement");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.PrimitiveCollection<List<Guid>>("PlayerIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("player_ids");

                    b.Property<int>("Rank")
                        .HasColumnType("integer")
                        .HasColumnName("rank");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision")
                        .HasColumnName("rating");

                    b.Property<double>("RecentRatingChange")
                        .HasColumnType("double precision")
                        .HasColumnName("recent_rating_change");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<Guid>("TournamentLeaderboardId")
                        .HasColumnType("uuid")
                        .HasColumnName("tournament_leaderboard_id");

                    b.PrimitiveCollection<List<int>>("TournamentPlacements")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("tournament_placements");

                    b.Property<int>("TournamentPoints")
                        .HasColumnType("integer")
                        .HasColumnName("tournament_points");

                    b.Property<int>("TournamentsPlayedCount")
                        .HasColumnType("integer")
                        .HasColumnName("tournaments_played_count");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("idx_tournament_leaderboard_items_team_id");

                    b.HasIndex("TournamentLeaderboardId")
                        .HasDatabaseName("idx_tournament_leaderboard_items_tournament_leaderboard_id");

                    b.HasIndex("TournamentPlacements")
                        .HasDatabaseName("gin_idx_tournament_leaderboard_items_tournament_placements");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("TournamentPlacements"), "gin");

                    b.ToTable("tournament_leaderboard_items", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.SchemaMetadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("AppliedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("applied_at");

                    b.Property<string>("AppliedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("applied_by");

                    b.Property<string>("CompatibilityNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("compatibility_notes");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsBreakingChange")
                        .HasColumnType("boolean")
                        .HasColumnName("is_breaking_change");

                    b.Property<string>("MigrationName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("migration_name");

                    b.Property<string>("SchemaVersion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("schema_version");

                    b.HasKey("Id");

                    b.HasIndex("AppliedAt")
                        .HasDatabaseName("ix_schema_metadata_applied_at");

                    b.HasIndex("MigrationName")
                        .HasDatabaseName("ix_schema_metadata_migration_name");

                    b.HasIndex("SchemaVersion")
                        .HasDatabaseName("ix_schema_metadata_schema_version");

                    b.ToTable("schema_metadata", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Scrimmage.ProvenPotentialRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double?>("AdjustedEstablishedChange")
                        .HasColumnType("double precision")
                        .HasColumnName("adjusted_established_change");

                    b.Property<double?>("AdjustedNewChange")
                        .HasColumnType("double precision")
                        .HasColumnName("adjusted_new_change");

                    b.Property<Guid?>("AppliedAtMatchId")
                        .HasColumnType("uuid")
                        .HasColumnName("applied_at_match_id");

                    b.PrimitiveCollection<HashSet<double>>("AppliedThresholds")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("applied_thresholds");

                    b.Property<Guid?>("BatchId")
                        .HasColumnType("uuid")
                        .HasColumnName("batch_id");

                    b.Property<double>("ChallengerConfidence")
                        .HasColumnType("double precision")
                        .HasColumnName("challenger_confidence");

                    b.Property<Guid>("ChallengerId")
                        .HasColumnType("uuid")
                        .HasColumnName("challenger_id");

                    b.Property<double>("ChallengerOriginalRatingChange")
                        .HasColumnType("double precision")
                        .HasColumnName("challenger_original_rating_change");

                    b.Property<double>("ChallengerRating")
                        .HasColumnType("double precision")
                        .HasColumnName("challenger_rating");

                    b.Property<double?>("ClosureFraction")
                        .HasColumnType("double precision")
                        .HasColumnName("closure_fraction");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("CrossedThresholds")
                        .HasColumnType("integer")
                        .HasColumnName("crossed_thresholds");

                    b.Property<Guid>("EstablishedPlayerId")
                        .HasColumnType("uuid")
                        .HasColumnName("established_player_id");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_complete");

                    b.Property<DateTime?>("LastCheckedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_checked_at");

                    b.Property<Guid>("NewPlayerId")
                        .HasColumnType("uuid")
                        .HasColumnName("new_player_id");

                    b.Property<int>("NewPlayerMatchCountAtCreation")
                        .HasColumnType("integer")
                        .HasColumnName("new_player_match_count_at_creation");

                    b.Property<double>("OpponentConfidence")
                        .HasColumnType("double precision")
                        .HasColumnName("opponent_confidence");

                    b.Property<Guid>("OpponentId")
                        .HasColumnType("uuid")
                        .HasColumnName("opponent_id");

                    b.Property<double>("OpponentOriginalRatingChange")
                        .HasColumnType("double precision")
                        .HasColumnName("opponent_original_rating_change");

                    b.Property<double>("OpponentRating")
                        .HasColumnType("double precision")
                        .HasColumnName("opponent_rating");

                    b.Property<Guid>("OriginalMatchId")
                        .HasColumnType("uuid")
                        .HasColumnName("original_match_id");

                    b.Property<double>("RatingAdjustment")
                        .HasColumnType("double precision")
                        .HasColumnName("rating_adjustment");

                    b.Property<double?>("ScalingApplied")
                        .HasColumnType("double precision")
                        .HasColumnName("scaling_applied");

                    b.Property<int>("TeamSize")
                        .HasColumnType("integer")
                        .HasColumnName("team_size");

                    b.Property<Guid?>("TrackingEndMatchId")
                        .HasColumnType("uuid")
                        .HasColumnName("tracking_end_match_id");

                    b.Property<Guid>("TriggerMatchId")
                        .HasColumnType("uuid")
                        .HasColumnName("trigger_match_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AppliedThresholds")
                        .HasDatabaseName("gin_idx_proven_potential_records_applied_thresholds");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("AppliedThresholds"), "gin");

                    b.ToTable("proven_potential_records", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Scrimmage.Scrimmage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AcceptedByPlayerId")
                        .HasColumnType("uuid")
                        .HasColumnName("accepted_by_player_id");

                    b.Property<int>("BestOf")
                        .HasColumnType("integer")
                        .HasColumnName("best_of");

                    b.Property<double?>("ChallengerTeamAdjustedRatingChange")
                        .HasColumnType("double precision")
                        .HasColumnName("challenger_team_adjusted_rating_change");

                    b.Property<double?>("ChallengerTeamCatchUpBonusUsed")
                        .HasColumnType("double precision")
                        .HasColumnName("challenger_team_catch_up_bonus_used");

                    b.Property<double>("ChallengerTeamConfidence")
                        .HasColumnType("double precision")
                        .HasColumnName("challenger_team_confidence");

                    b.Property<double?>("ChallengerTeamGapScalingAppliedValue")
                        .HasColumnType("double precision")
                        .HasColumnName("challenger_team_gap_scaling_applied_value");

                    b.Property<Guid>("ChallengerTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("challenger_team_id");

                    b.Property<double?>("ChallengerTeamMultiplierUsed")
                        .HasColumnType("double precision")
                        .HasColumnName("challenger_team_multiplier_used");

                    b.Property<bool>("ChallengerTeamProvenPotentialApplied")
                        .HasColumnType("boolean")
                        .HasColumnName("challenger_team_proven_potential_applied");

                    b.Property<DateTime?>("ChallengerTeamProvenPotentialAppliedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("challenger_team_proven_potential_applied_at");

                    b.Property<double>("ChallengerTeamRating")
                        .HasColumnType("double precision")
                        .HasColumnName("challenger_team_rating");

                    b.Property<double?>("ChallengerTeamRatingChange")
                        .HasColumnType("double precision")
                        .HasColumnName("challenger_team_rating_change");

                    b.Property<int?>("ChallengerTeamScore")
                        .HasColumnType("integer")
                        .HasColumnName("challenger_team_score");

                    b.Property<double?>("ChallengerTeamVarietyBonusUsed")
                        .HasColumnType("double precision")
                        .HasColumnName("challenger_team_variety_bonus_used");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HigherRatedTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("higher_rated_team_id");

                    b.Property<Guid>("IssuedByPlayerId")
                        .HasColumnType("uuid")
                        .HasColumnName("issued_by_player_id");

                    b.Property<Guid?>("MatchId")
                        .HasColumnType("uuid")
                        .HasColumnName("match_id");

                    b.Property<double?>("OpponentTeamAdjustedRatingChange")
                        .HasColumnType("double precision")
                        .HasColumnName("opponent_team_adjusted_rating_change");

                    b.Property<double?>("OpponentTeamCatchUpBonusUsed")
                        .HasColumnType("double precision")
                        .HasColumnName("opponent_team_catch_up_bonus_used");

                    b.Property<double>("OpponentTeamConfidence")
                        .HasColumnType("double precision")
                        .HasColumnName("opponent_team_confidence");

                    b.Property<double?>("OpponentTeamGapScalingAppliedValue")
                        .HasColumnType("double precision")
                        .HasColumnName("opponent_team_gap_scaling_applied_value");

                    b.Property<Guid>("OpponentTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("opponent_team_id");

                    b.Property<double?>("OpponentTeamMultiplierUsed")
                        .HasColumnType("double precision")
                        .HasColumnName("opponent_team_multiplier_used");

                    b.Property<bool>("OpponentTeamProvenPotentialApplied")
                        .HasColumnType("boolean")
                        .HasColumnName("opponent_team_proven_potential_applied");

                    b.Property<DateTime?>("OpponentTeamProvenPotentialAppliedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("opponent_team_proven_potential_applied_at");

                    b.Property<double>("OpponentTeamRating")
                        .HasColumnType("double precision")
                        .HasColumnName("opponent_team_rating");

                    b.Property<double?>("OpponentTeamRatingChange")
                        .HasColumnType("double precision")
                        .HasColumnName("opponent_team_rating_change");

                    b.Property<int?>("OpponentTeamScore")
                        .HasColumnType("integer")
                        .HasColumnName("opponent_team_score");

                    b.Property<double?>("OpponentTeamVarietyBonusUsed")
                        .HasColumnType("double precision")
                        .HasColumnName("opponent_team_variety_bonus_used");

                    b.Property<double>("RatingRangeAtMatch")
                        .HasColumnType("double precision")
                        .HasColumnName("rating_range_at_match");

                    b.Property<Guid>("ScrimmageChallengeId")
                        .HasColumnType("uuid")
                        .HasColumnName("scrimmage_challenge_id");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<int>("TeamSize")
                        .HasColumnType("integer")
                        .HasColumnName("team_size");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WinnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("winner_id");

                    b.HasKey("Id");

                    b.HasIndex("AcceptedByPlayerId")
                        .HasDatabaseName("idx_scrimmages_accepted_by_player_id");

                    b.HasIndex("ChallengerTeamId")
                        .HasDatabaseName("idx_scrimmages_challenger_team_id");

                    b.HasIndex("IssuedByPlayerId")
                        .HasDatabaseName("idx_scrimmages_issued_by_player_id");

                    b.HasIndex("MatchId")
                        .HasDatabaseName("idx_scrimmages_match_id");

                    b.HasIndex("OpponentTeamId")
                        .HasDatabaseName("idx_scrimmages_opponent_team_id");

                    b.HasIndex("ScrimmageChallengeId")
                        .HasDatabaseName("idx_scrimmages_scrimmage_challenge_id");

                    b.ToTable("scrimmages", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Scrimmage.ScrimmageChallenge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AcceptedByPlayerId")
                        .HasColumnType("uuid")
                        .HasColumnName("accepted_by_player_id");

                    b.Property<int>("BestOf")
                        .HasColumnType("integer")
                        .HasColumnName("best_of");

                    b.Property<decimal?>("ChallengeChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("challenge_channel_id");

                    b.Property<DateTime>("ChallengeExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("challenge_expires_at");

                    b.Property<decimal?>("ChallengeMessageId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("challenge_message_id");

                    b.Property<int>("ChallengeStatus")
                        .HasColumnType("integer")
                        .HasColumnName("challenge_status");

                    b.Property<Guid>("ChallengerTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("challenger_team_id");

                    b.PrimitiveCollection<Guid[]>("ChallengerTeammateIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("challenger_teammate_ids");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IssuedByPlayerId")
                        .HasColumnType("uuid")
                        .HasColumnName("issued_by_player_id");

                    b.Property<Guid>("OpponentTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("opponent_team_id");

                    b.PrimitiveCollection<Guid[]>("OpponentTeammateIds")
                        .HasColumnType("uuid[]")
                        .HasColumnName("opponent_teammate_ids");

                    b.Property<int>("TeamSize")
                        .HasColumnType("integer")
                        .HasColumnName("team_size");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AcceptedByPlayerId")
                        .HasDatabaseName("idx_scrimmage_challenges_accepted_by_player_id");

                    b.HasIndex("ChallengerTeamId")
                        .HasDatabaseName("idx_scrimmage_challenges_challenger_team_id");

                    b.HasIndex("IssuedByPlayerId")
                        .HasDatabaseName("idx_scrimmage_challenges_issued_by_player_id");

                    b.HasIndex("OpponentTeamId")
                        .HasDatabaseName("idx_scrimmage_challenges_opponent_team_id");

                    b.ToTable("scrimmage_challenges", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Scrimmage.ScrimmageStateSnapshot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ScrimmageId")
                        .HasColumnType("uuid")
                        .HasColumnName("scrimmage_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ScrimmageId")
                        .HasDatabaseName("idx_scrimmage_state_snapshots_scrimmage_id");

                    b.ToTable("scrimmage_state_snapshots", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Tournament.Tournament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("BestOf")
                        .HasColumnType("integer")
                        .HasColumnName("best_of");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("integer")
                        .HasColumnName("max_participants");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.PrimitiveCollection<Guid[]>("StateHistoryIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("state_history_ids");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("TeamSize")
                        .HasColumnType("integer")
                        .HasColumnName("team_size");

                    b.Property<Guid?>("TournamentTeamStatsId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TournamentTeamStatsId");

                    b.ToTable("tournaments", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Tournament.TournamentStateSnapshot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.PrimitiveCollection<List<Guid>>("ActiveMatchIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("active_match_ids");

                    b.Property<Dictionary<string, object>>("AdditionalData")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("additional_data");

                    b.PrimitiveCollection<List<Guid>>("AllMatchIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("all_match_ids");

                    b.Property<string>("CancellationReason")
                        .HasColumnType("text")
                        .HasColumnName("cancellation_reason");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("cancelled_at");

                    b.Property<Guid?>("CancelledByMashinaUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("cancelled_by_mashina_user_id");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.PrimitiveCollection<List<Guid>>("CompletedMatchIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("completed_match_ids");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("CurrentParticipantCount")
                        .HasColumnType("integer")
                        .HasColumnName("current_participant_count");

                    b.Property<int>("CurrentRound")
                        .HasColumnType("integer")
                        .HasColumnName("current_round");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.PrimitiveCollection<List<Guid>>("FinalRankings")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("final_rankings");

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("integer")
                        .HasColumnName("max_participants");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.PrimitiveCollection<List<Guid>>("ParticipantTeamIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("participant_team_ids");

                    b.PrimitiveCollection<List<Guid>>("RegisteredTeamIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("registered_team_ids");

                    b.Property<DateTime?>("RegistrationOpenedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registration_opened_at");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<Guid>("TournamentId")
                        .HasColumnType("uuid")
                        .HasColumnName("tournament_id");

                    b.Property<Guid>("TriggeredByMashinaUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("triggered_by_mashina_user_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WinnerTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("winner_team_id");

                    b.HasKey("Id");

                    b.HasIndex("AdditionalData")
                        .HasDatabaseName("gin_idx_tournament_state_snapshots_additional_data");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("AdditionalData"), "gin");

                    b.HasIndex("CancelledByMashinaUserId")
                        .HasDatabaseName("idx_tournament_state_snapshots_cancelled_by_mashina_user_id");

                    b.HasIndex("TournamentId")
                        .HasDatabaseName("idx_tournament_state_snapshots_tournament_id");

                    b.HasIndex("TriggeredByMashinaUserId")
                        .HasDatabaseName("idx_tournament_state_snapshots_triggered_by_mashina_user_id");

                    b.ToTable("tournament_state_snapshots", (string)null);
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.DivisionLearningCurve", b =>
                {
                    b.HasOne("WabbitBot.Core.Common.Models.Common.Division", "Division")
                        .WithMany("LearningCurves")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WabbitBot.Core.Common.Models.Common.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Division");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.DivisionMapStats", b =>
                {
                    b.HasOne("WabbitBot.Core.Common.Models.Common.Division", "Division")
                        .WithMany("MapStats")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WabbitBot.Core.Common.Models.Common.Map", "Map")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Division");

                    b.Navigation("Map");
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.DivisionStats", b =>
                {
                    b.HasOne("WabbitBot.Core.Common.Models.Common.Division", "Division")
                        .WithMany("Stats")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Division");
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.Game", b =>
                {
                    b.HasOne("WabbitBot.Core.Common.Models.Common.Map", "Map")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WabbitBot.Core.Common.Models.Common.Match", "Match")
                        .WithMany("Games")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WabbitBot.Core.Common.Models.Common.Division", "Team1Division")
                        .WithMany()
                        .HasForeignKey("Team1DivisionId");

                    b.HasOne("WabbitBot.Core.Common.Models.Common.Division", "Team2Division")
                        .WithMany()
                        .HasForeignKey("Team2DivisionId");

                    b.Navigation("Map");

                    b.Navigation("Match");

                    b.Navigation("Team1Division");

                    b.Navigation("Team2Division");
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.GameStateSnapshot", b =>
                {
                    b.HasOne("WabbitBot.Core.Common.Models.Common.Game", "Game")
                        .WithMany("StateHistory")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WabbitBot.Core.Common.Models.Common.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Match");
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.Match", b =>
                {
                    b.HasOne("WabbitBot.Core.Common.Models.Common.Team", "Team1")
                        .WithMany("Matches")
                        .HasForeignKey("Team1Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WabbitBot.Core.Common.Models.Common.Team", "Team2")
                        .WithMany()
                        .HasForeignKey("Team2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Team1");

                    b.Navigation("Team2");
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.MatchStateSnapshot", b =>
                {
                    b.HasOne("WabbitBot.Core.Common.Models.Common.Match", null)
                        .WithMany("StateHistory")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.Player", b =>
                {
                    b.HasOne("WabbitBot.Core.Common.Models.Common.MashinaUser", "MashinaUser")
                        .WithOne("Player")
                        .HasForeignKey("WabbitBot.Core.Common.Models.Common.Player", "MashinaUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WabbitBot.Core.Common.Models.Common.Match", null)
                        .WithMany("Team1Players")
                        .HasForeignKey("MatchId");

                    b.HasOne("WabbitBot.Core.Common.Models.Common.Match", null)
                        .WithMany("Team2Players")
                        .HasForeignKey("MatchId1");

                    b.HasOne("WabbitBot.Core.Common.Models.Scrimmage.Scrimmage", null)
                        .WithMany("ChallengerTeamPlayers")
                        .HasForeignKey("ScrimmageId");

                    b.HasOne("WabbitBot.Core.Common.Models.Scrimmage.Scrimmage", null)
                        .WithMany("OpponentTeamPlayers")
                        .HasForeignKey("ScrimmageId1");

                    b.HasOne("WabbitBot.Core.Common.Models.Leaderboard.ScrimmageLeaderboardItem", null)
                        .WithMany("Players")
                        .HasForeignKey("ScrimmageLeaderboardItemId");

                    b.HasOne("WabbitBot.Core.Common.Models.Leaderboard.TournamentLeaderboardItem", null)
                        .WithMany("Players")
                        .HasForeignKey("TournamentLeaderboardItemId");

                    b.Navigation("MashinaUser");
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.Replay", b =>
                {
                    b.HasOne("WabbitBot.Core.Common.Models.Common.Game", null)
                        .WithMany("Replays")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.ReplayPlayer", b =>
                {
                    b.HasOne("WabbitBot.Core.Common.Models.Common.Replay", "Replay")
                        .WithMany("Players")
                        .HasForeignKey("ReplayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Replay");
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.TeamMember", b =>
                {
                    b.HasOne("WabbitBot.Core.Common.Models.Common.MashinaUser", "MashinaUser")
                        .WithMany()
                        .HasForeignKey("MashinaUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WabbitBot.Core.Common.Models.Common.TeamRoster", "TeamRoster")
                        .WithMany("RosterMembers")
                        .HasForeignKey("TeamRosterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MashinaUser");

                    b.Navigation("TeamRoster");
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.TeamOpponentEncounter", b =>
                {
                    b.HasOne("WabbitBot.Core.Common.Models.Common.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WabbitBot.Core.Common.Models.Common.Team", "Opponent")
                        .WithMany()
                        .HasForeignKey("OpponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WabbitBot.Core.Common.Models.Common.ScrimmageTeamStats", null)
                        .WithMany("OpponentEncounters")
                        .HasForeignKey("ScrimmageTeamStatsId");

                    b.HasOne("WabbitBot.Core.Common.Models.Common.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Opponent");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.TeamRoster", b =>
                {
                    b.HasOne("WabbitBot.Core.Common.Models.Common.Team", "Team")
                        .WithMany("Rosters")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.TeamVarietyStats", b =>
                {
                    b.HasOne("WabbitBot.Core.Common.Models.Common.Team", "Team")
                        .WithMany("VarietyStats")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.TournamentTeamStats", b =>
                {
                    b.HasOne("WabbitBot.Core.Common.Models.Common.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Leaderboard.ScrimmageLeaderboard", b =>
                {
                    b.HasOne("WabbitBot.Core.Common.Models.Leaderboard.Season", "Season")
                        .WithMany("ScrimmageLeaderboards")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Leaderboard.ScrimmageLeaderboardItem", b =>
                {
                    b.HasOne("WabbitBot.Core.Common.Models.Leaderboard.ScrimmageLeaderboard", "ScrimmageLeaderboard")
                        .WithMany("LeaderboardItems")
                        .HasForeignKey("ScrimmageLeaderboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WabbitBot.Core.Common.Models.Common.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScrimmageLeaderboard");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Leaderboard.Season", b =>
                {
                    b.HasOne("WabbitBot.Core.Common.Models.Leaderboard.SeasonConfig", "Config")
                        .WithMany()
                        .HasForeignKey("SeasonConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Config");
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Leaderboard.TournamentLeaderboard", b =>
                {
                    b.HasOne("WabbitBot.Core.Common.Models.Leaderboard.Season", "Season")
                        .WithMany("TournamentLeaderboards")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Leaderboard.TournamentLeaderboardItem", b =>
                {
                    b.HasOne("WabbitBot.Core.Common.Models.Common.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WabbitBot.Core.Common.Models.Leaderboard.TournamentLeaderboard", "TournamentLeaderboard")
                        .WithMany("LeaderboardItems")
                        .HasForeignKey("TournamentLeaderboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("TournamentLeaderboard");
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Scrimmage.Scrimmage", b =>
                {
                    b.HasOne("WabbitBot.Core.Common.Models.Common.Player", "AcceptedByPlayer")
                        .WithMany()
                        .HasForeignKey("AcceptedByPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WabbitBot.Core.Common.Models.Common.Team", "ChallengerTeam")
                        .WithMany()
                        .HasForeignKey("ChallengerTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WabbitBot.Core.Common.Models.Common.Player", "IssuedByPlayer")
                        .WithMany()
                        .HasForeignKey("IssuedByPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WabbitBot.Core.Common.Models.Common.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchId");

                    b.HasOne("WabbitBot.Core.Common.Models.Common.Team", "OpponentTeam")
                        .WithMany()
                        .HasForeignKey("OpponentTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WabbitBot.Core.Common.Models.Scrimmage.ScrimmageChallenge", "ScrimmageChallenge")
                        .WithMany()
                        .HasForeignKey("ScrimmageChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcceptedByPlayer");

                    b.Navigation("ChallengerTeam");

                    b.Navigation("IssuedByPlayer");

                    b.Navigation("Match");

                    b.Navigation("OpponentTeam");

                    b.Navigation("ScrimmageChallenge");
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Scrimmage.ScrimmageChallenge", b =>
                {
                    b.HasOne("WabbitBot.Core.Common.Models.Common.Player", "AcceptedByPlayer")
                        .WithMany()
                        .HasForeignKey("AcceptedByPlayerId");

                    b.HasOne("WabbitBot.Core.Common.Models.Common.Team", "ChallengerTeam")
                        .WithMany()
                        .HasForeignKey("ChallengerTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WabbitBot.Core.Common.Models.Common.Player", "IssuedByPlayer")
                        .WithMany()
                        .HasForeignKey("IssuedByPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WabbitBot.Core.Common.Models.Common.Team", "OpponentTeam")
                        .WithMany()
                        .HasForeignKey("OpponentTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcceptedByPlayer");

                    b.Navigation("ChallengerTeam");

                    b.Navigation("IssuedByPlayer");

                    b.Navigation("OpponentTeam");
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Scrimmage.ScrimmageStateSnapshot", b =>
                {
                    b.HasOne("WabbitBot.Core.Common.Models.Scrimmage.Scrimmage", "Scrimmage")
                        .WithMany("StateHistory")
                        .HasForeignKey("ScrimmageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scrimmage");
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Tournament.Tournament", b =>
                {
                    b.HasOne("WabbitBot.Core.Common.Models.Common.TournamentTeamStats", null)
                        .WithMany("Tournaments")
                        .HasForeignKey("TournamentTeamStatsId");
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Tournament.TournamentStateSnapshot", b =>
                {
                    b.HasOne("WabbitBot.Core.Common.Models.Common.MashinaUser", "CancelledByMashinaUser")
                        .WithMany()
                        .HasForeignKey("CancelledByMashinaUserId");

                    b.HasOne("WabbitBot.Core.Common.Models.Tournament.Tournament", "Tournament")
                        .WithMany("StateHistory")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WabbitBot.Core.Common.Models.Common.MashinaUser", "TriggeredByMashinaUser")
                        .WithMany()
                        .HasForeignKey("TriggeredByMashinaUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CancelledByMashinaUser");

                    b.Navigation("Tournament");

                    b.Navigation("TriggeredByMashinaUser");
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.Division", b =>
                {
                    b.Navigation("LearningCurves");

                    b.Navigation("MapStats");

                    b.Navigation("Stats");
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.Game", b =>
                {
                    b.Navigation("Replays");

                    b.Navigation("StateHistory");
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.MashinaUser", b =>
                {
                    b.Navigation("Player");
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.Match", b =>
                {
                    b.Navigation("Games");

                    b.Navigation("StateHistory");

                    b.Navigation("Team1Players");

                    b.Navigation("Team2Players");
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.Replay", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.ScrimmageTeamStats", b =>
                {
                    b.Navigation("OpponentEncounters");
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.Team", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("Rosters");

                    b.Navigation("VarietyStats");
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.TeamRoster", b =>
                {
                    b.Navigation("RosterMembers");
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Common.TournamentTeamStats", b =>
                {
                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Leaderboard.ScrimmageLeaderboard", b =>
                {
                    b.Navigation("LeaderboardItems");
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Leaderboard.ScrimmageLeaderboardItem", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Leaderboard.Season", b =>
                {
                    b.Navigation("ScrimmageLeaderboards");

                    b.Navigation("TournamentLeaderboards");
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Leaderboard.TournamentLeaderboard", b =>
                {
                    b.Navigation("LeaderboardItems");
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Leaderboard.TournamentLeaderboardItem", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Scrimmage.Scrimmage", b =>
                {
                    b.Navigation("ChallengerTeamPlayers");

                    b.Navigation("OpponentTeamPlayers");

                    b.Navigation("StateHistory");
                });

            modelBuilder.Entity("WabbitBot.Core.Common.Models.Tournament.Tournament", b =>
                {
                    b.Navigation("StateHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
