using WabbitBot.Common.Events;
using WabbitBot.Common.Events.EventInterfaces;
using WabbitBot.Common.Models;
using WabbitBot.Common.Configuration;
using WabbitBot.DiscBot.DiscBot.Events;
using WabbitBot.DiscBot.DiscBot.Base;
using WabbitBot.Common.Attributes;
using WabbitBot.DiscBot.DSharpPlus;

namespace WabbitBot.DiscBot.DiscBot.Events;

[GenerateEventHandler(EventBusType = EventBusType.DiscBot, EnableMetrics = true, EnableErrorHandling = true, EnableLogging = true)]
public partial class DiscordEventHandler : DiscordBaseHandler
{
    private readonly IBotConfigurationService _configReader;
    private DiscordBot? _discordBot;

    public DiscordEventHandler(IBotConfigurationService config)
        : base(DiscordEventBus.Instance)
    {
        _configReader = config ?? throw new ArgumentNullException(nameof(config));
    }

    public override Task InitializeAsync()
    {
        // Event subscriptions will be auto-generated by source generator
        return Task.CompletedTask;
    }

    [EventHandler(Priority = 1, EnableRetry = true, MaxRetryAttempts = 3)]
    private async Task HandleStartupInitiated(StartupInitiatedEvent @event)
    {
        // Create the DiscordBot instance but don't start it yet
        _discordBot = new DiscordBot(_configReader);

        // Initialize the bot with the token
        await _discordBot.InitializeAsync();
    }

    [EventHandler(Priority = 2, EnableRetry = true, MaxRetryAttempts = 3)]
    private async Task HandleSystemReady(SystemReadyEvent @event)
    {
        if (_discordBot is null)
        {
            throw new InvalidOperationException("Discord bot not initialized before system ready event");
        }

        // Now start the bot
        await _discordBot.StartAsync();

        // Signal that the application is fully ready (Discord-internal event)
        await EventBus.PublishAsync(new DiscordApplicationReadyEvent(TimeSpan.Zero, _configReader));
    }
}